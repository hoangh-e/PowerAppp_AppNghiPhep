---
description: √Åp d·ª•ng khi t·∫°o, ƒëi·ªÅu ch·ªânh, s·ª≠a ƒë·ªïi view ho·∫∑c UI, view, ui, screen, layout, controls,... li√™n quan d·∫øn giao di·ªán cho power app
globs: 
alwaysApply: false
---
# POWER APP DEVELOPMENT RULES FOR AI AGENT

> **CRITICAL**: Agent MUST follow these rules ABSOLUTELY when creating or modifying Power App YAML files.

---

## üìã TABLE OF CONTENTS
1. [File Structure](mdc:#1-file-structure)
2. [Control Rules](mdc:#2-control-rules)
3. [Position & Size Rules](mdc:#3-position--size-rules)
4. [Allowed Controls](mdc:#4-allowed-controls)
5. [Properties Guidelines](mdc:#5-properties-guidelines)
6. [Naming Conventions](mdc:#6-naming-conventions)
7. [Common Mistakes](mdc:#7-common-mistakes)
8. [Best Practices](mdc:#8-best-practices)

---

## 1. FILE STRUCTURE

### 1.1 Screens (M√†n h√¨nh)
**REQUIRED**: All screen files MUST start with `Screens:`

```yaml
Screens:
  ScreenName:
    Properties:
      Fill: =RGBA(248, 250, 252, 1)
      OnVisible: =Set(varExample, "value")
    Children:
      - ControlName:
          Control: ControlType
          Properties:
            # Control properties here
```

### 1.2 Components (Th√†nh ph·∫ßn)
**REQUIRED**: All component files MUST use the CORRECT structure:

```yaml
# ‚úÖ CORRECT - Component Definition Structure
ComponentDefinitions:
  ComponentName:
    DefinitionType: CanvasComponent
    CustomProperties:
      PropertyName:
        PropertyKind: Input
        DisplayName: PropertyName
        Description: "Property description"
        DataType: Text
        Default: ="Default value"
    Properties:
      Height: =App.Height
      Width: =App.Width
    Children:
      - ControlName:
          Control: ControlType
          Properties:
            # Control properties here

# ‚ùå WRONG - Old/Invalid Structure
ComponentDefinition:
  DefinitionType: CanvasComponent
  CustomProperties:
    - PropertyName:
        PropertyType: Data
        PropertyDataType: Text
        DefaultValue: ="Default"
```

### 1.3 Custom Properties Data Types
**ONLY** these data types are allowed for `DataType`:
- `Text` - String values
- `Number` - Numeric values  
- `Boolean` - True/false values
- `Date and time` - Date/time values
- `Screen` - Screen references
- `Record` - Single record
- `Table` - Data tables
- `Image` - Image data
- `Video or audio` - Media files
- `Color` - Color values
- `Currency` - Currency values

### 1.4 Custom Property Kinds
**ONLY** these property kinds are allowed for `PropertyKind`:
- `Input` - Input properties (most common)
- `Output` - Output properties
- `Event` - Event properties

### 1.5 Event Properties Structure
**REQUIRED**: Event properties MUST follow this structure:

```yaml
# ‚úÖ CORRECT - Event Property Structure
OnNavigate:
  PropertyKind: Event
  DisplayName: OnNavigate
  Description: "Event description"
  ReturnType: None
  Default: =
  Parameters:
    - ParameterName:
        Description: "Parameter description"
        DataType: Text
        IsOptional: true
        Default: ="Default value"

# ‚ùå WRONG - Invalid Event Structure
- OnNavigate:
    PropertyType: Event
    PropertyDataType: Text
    DefaultValue: =""
```

---

## 2. CONTROL RULES

### 2.1 Version Restriction
**FORBIDDEN**: Never include version numbers in Control declarations

```yaml
# ‚úÖ CORRECT
Control: GroupContainer

# ‚ùå WRONG
Control: GroupContainer@1.3.0
```

### 2.2 Forbidden Properties
**NEVER USE** these properties:
- `ZIndex` - Not supported
- `DropShadow` - Use only when certain the control supports it

### 2.3 Forbidden Properties by Control Type
**Rectangle Control** - NEVER use these properties:
- `RadiusBottomLeft` - Not supported
- `RadiusBottomRight` - Not supported  
- `RadiusTopLeft` - Not supported
- `RadiusTopRight` - Not supported
- Use `BorderRadius` instead for uniform radius

**Classic/Button Control** - NEVER use these properties:
- `BorderRadius` - Not supported for Classic/Button
- `Disabled` - Use `DisplayMode` instead
- `Align` - Not supported for buttons

**Classic/TextInput Control** - NEVER use these properties:
- `Self.Focused` - Not recognized, use `Self.Focus` instead
- `Self.IsHovered` - Not recognized, use hover events instead

### 2.4 Required Properties for All Controls
Every control MUST have these properties when applicable:
- `X` - Horizontal position (relative to parent)
- `Y` - Vertical position (relative to parent)  
- `Width` - Control width (relative to parent)
- `Height` - Control height (relative to parent)

---

## 3. POSITION & SIZE RULES

### 3.1 Width and Height - MANDATORY RELATIVE POSITIONING
**NEVER** use absolute values. Always reference parent or other controls.

```yaml
# ‚úÖ CORRECT Examples
Width: =Parent.Width * (3/2)
Height: =Parent.Height / 3
Width: =(Parent.Width - Control.Width) / 2
Height: =Self.Width

# ‚ùå WRONG Examples  
Width: 400
Height: 200
Width: =400
```

### 3.2 X and Y Positioning - MANDATORY RELATIVE POSITIONING
**ALWAYS** position relative to parent or other controls.

```yaml
# ‚úÖ CORRECT Examples
X: =Parent.X /2
Y: =HeaderControl.Y + HeaderControl.Height
X: =(Parent.Width - Self.Width) / 2
Y: =Parent.Height - Self.Height 

# ‚ùå WRONG Examples
X: 100
Y: 50
```

### 3.3 Screen-Level Properties
For screens, use these specific properties:

```yaml
Properties:
  Fill: =RGBA(248, 250, 252, 1)
  # Width and Height are automatically handled by Power Apps
```

---

## 4. ALLOWED CONTROLS

### 4.1 Input Controls
```yaml
# Text Input
Control: Classic/TextInput

# Buttons  
Control: Classic/Button

# Date Selection
Control: Classic/DatePicker

# Dropdowns
Control: Classic/DropDown
Control: Classic/ComboBox

# Selection Controls
Control: Classic/CheckBox
Control: Classic/Radio
Control: Classic/Toggle
Control: Classic/Slider
Control: Rating
Control: PenInput
```

### 4.2 Display Controls
```yaml
# Text Display
Control: Label

# Media Display
Control: Image
Control: HtmlViewer
Control: RichTextEditor
Control: PDFViewer

# Icons
Control: Classic/Icon
```

### 4.3 Layout Controls
```yaml
# Containers
Control: GroupContainer
Control: Rectangle

# Data Display
Control: Gallery
Control: Form
Control: FormViewer
Control: DataTable
```

### 4.4 Shape Controls
```yaml
Control: Circle
Control: Triangle
Control: Pentagon
Control: Octagon
Control: Star
Control: Arrow
Control: PartialCircle
```

### 4.5 Chart Controls
```yaml
Control: BarChart
Control: LineChart
Control: PieChart
Control: Legend
```

### 4.6 Media & Data Controls
```yaml
# Media
Control: AddMedia
Control: Timer

# Data
Control: Import
Control: Export
Control: ListBox
Control: PowerBI
```

---

## 5. PROPERTIES GUIDELINES

### 5.1 Color Properties
**ALWAYS** use RGBA format:

```yaml
Fill: =RGBA(255, 255, 255, 1)
Color: =RGBA(32, 54, 71, 1)
BorderColor: =RGBA(230, 230, 230, 1)
```

### 5.2 DropShadow Properties
**ONLY** use these values:
```yaml
DropShadow: =DropShadow.Light
DropShadow: =DropShadow.Regular
DropShadow: =DropShadow.Bold
DropShadow: =DropShadow.ExtraBold
DropShadow: =DropShadow.Semilight
DropShadow: =DropShadow.None
```

### 5.3 Font Properties
```yaml
FontWeight: =FontWeight.Bold
FontWeight: =FontWeight.Semibold
FontWeight: =FontWeight.Normal
Font: =Font.'Open Sans'
```

### 5.4 Formula Properties
**ALL** dynamic properties MUST start with `=`:

```yaml
# ‚úÖ CORRECT
Visible: =varShowControl
Text: =Concatenate("Hello ", varUserName)
Fill: =If(Self.IsHovered, RGBA(0, 120, 212, 1), RGBA(255, 255, 255, 1))

# ‚ùå WRONG
Visible: varShowControl
Text: "Static text" # Use this only for truly static text
```

### 5.5 Variants for Controls
```yaml
# GroupContainer
Variant: ManualLayout
Variant: AutoLayout

# Gallery
Variant: Vertical
Variant: Horizontal
Variant: VariableHeight

# Form
Variant: Classic

# Arrow
Variant: BackArrow

# Star
Variant: 5Points
Variant: 6Points
Variant: 8Points
Variant: 12Points
```

---

## 6. NAMING CONVENTIONS

### 6.1 Special Character Handling
**REQUIRED**: Wrap names with special characters in single quotes:

```yaml
# ‚úÖ CORRECT - Names with special characters
- 'Header.Logo':
- 'Login Container':
- 'User-Info':
- 'Data View 1':
- 'My.Control.Name':

# ‚úÖ CORRECT - Simple names (no quotes needed)
- HeaderLogo:
- LoginContainer:
- UserInfo:
```

### 6.2 Naming Best Practices
```yaml
# Use descriptive, hierarchical names
- 'Header.UserInfo.Avatar':
- 'LoginForm.UsernameInput':
- 'Dashboard.StatsCard.Title':
- 'Navigation.MenuButton':
```

---

## 7. COMMON MISTAKES TO AVOID

### 7.1 Component Definition Structure Errors
**CRITICAL**: Use the correct component structure:

```yaml
# ‚ùå WRONG - Old/Invalid Structure
ComponentDefinition:
  DefinitionType: CanvasComponent
  CustomProperties:
    - UserRole:
        PropertyType: Data
        PropertyDataType: Text
        DefaultValue: ="Employee"

# ‚úÖ CORRECT - New/Valid Structure
ComponentDefinitions:
  NavigationComponent:
    DefinitionType: CanvasComponent
    CustomProperties:
      UserRole:
        PropertyKind: Input
        DisplayName: UserRole
        Description: "Vai tr√≤ c·ªßa ng∆∞·ªùi d√πng"
        DataType: Text
        Default: ="Employee"
    Properties:
      Height: =App.Height
      Width: =App.Width
```

### 7.2 Custom Properties Errors
**NEVER USE** these old property names:
- `PropertyType` ‚Üí Use `PropertyKind`
- `PropertyDataType` ‚Üí Use `DataType`
- `DefaultValue` ‚Üí Use `Default`

**ALWAYS INCLUDE** these required fields:
- `DisplayName` - Human readable name
- `Description` - Property description
- `DataType` - Data type
- `Default` - Default value

### 7.3 Event Property Errors
**WRONG** event structure:
```yaml
# ‚ùå WRONG
- OnNavigate:
    PropertyType: Event
    PropertyDataType: Text
    DefaultValue: =""
```

**CORRECT** event structure:
```yaml
# ‚úÖ CORRECT
OnNavigate:
  PropertyKind: Event
  DisplayName: OnNavigate
  Description: "S·ª± ki·ªán khi chuy·ªÉn m√†n h√¨nh"
  ReturnType: None
  Default: =
  Parameters:
    - ScreenName:
        Description: "T√™n m√†n h√¨nh"
        DataType: Text
        IsOptional: true
        Default: ="Dashboard"
```

### 7.4 Event Call Syntax Errors
**WRONG** event call syntax:
```yaml
# ‚ùå WRONG
OnSelect: =NavigationComponent.OnNavigate; Set(varActiveScreen, "Dashboard")
```

**CORRECT** event call syntax:
```yaml
# ‚úÖ CORRECT
OnSelect: =NavigationComponent.OnNavigate(); Set(varActiveScreen, "Dashboard")
```

### 7.5 Text Property Formatting
**AVOID** spaces after colons in text content:

```yaml
# ‚úÖ CORRECT
Text: ="Demo:Ph·∫ßn l·ªõn c·ªßa ·ª©ng d·ª•ng"

# ‚ùå WRONG  
Text: ="Demo: Ph·∫ßn l·ªõn c·ªßa ·ª©ng d·ª•ng"
```

### 7.6 Absolute Positioning
**NEVER** use absolute values for positioning:

```yaml
# ‚ùå WRONG
X: 100
Y: 200
Width: 300
Height: 150

# ‚úÖ CORRECT
X: =Parent.X + 20
Y: =PreviousControl.Y + PreviousControl.Height + 10
Width: =Parent.Width - 40
Height: =Parent.Height / 4
```

### 7.7 Missing Required Properties
**ALWAYS** include these for positioned controls:

```yaml
Properties:
  X: =Parent.X + 20
  Y: =Parent.Y + 10
  Width: =Parent.Width - 40
  Height: =40
  # Other properties...
```

### 7.8 Missing Component-Level Properties
**ALWAYS** include these for components:

```yaml
ComponentDefinitions:
  ComponentName:
    DefinitionType: CanvasComponent
    CustomProperties:
      # Custom properties here
    Properties:
      Height: =App.Height
      Width: =App.Width
    Children:
      # Child controls here
```

### 7.9 YAML Syntax Errors with Multi-line Formulas
**CRITICAL**: Multi-line formulas MUST be written on single line:

```yaml
# ‚ùå WRONG - Multi-line formula causes YAML parsing error
HoverFill: =If(
              IsBlank(LoginContainer.FormSection.UsernameInput.Text) || IsBlank(LoginContainer.FormSection.PasswordInput.Text),
              RGBA(166, 166, 166, 1),
              ColorFade(RGBA(0, 120, 212, 1), -20%)
            )

# ‚úÖ CORRECT - Single line formula
HoverFill: =If(IsBlank(LoginContainer.FormSection.UsernameInput.Text) || IsBlank(LoginContainer.FormSection.PasswordInput.Text), RGBA(166, 166, 166, 1), ColorFade(RGBA(0, 120, 212, 1), -20%))
```

### 7.10 Control Reference Errors
**CRITICAL**: Use single quotes for control names with dots:

```yaml
# ‚ùå WRONG - Dot operator error
Text: =LoginCard.FormSection.UsernameInput.Text

# ‚úÖ CORRECT - Wrap in single quotes
Text: ='LoginCard.FormSection.UsernameInput'.Text
```

### 7.11 Invalid Self Properties
**NEVER USE** these invalid Self properties:

```yaml
# ‚ùå WRONG - Invalid Self properties
BorderColor: =If(Self.Focused, RGBA(0, 120, 212, 1), RGBA(200, 200, 200, 1))
Fill: =If(Self.IsHovered, RGBA(240, 240, 240, 1), RGBA(255, 255, 255, 1))

# ‚úÖ CORRECT - Use valid properties or events
BorderColor: =If(Self.Focus, RGBA(0, 120, 212, 1), RGBA(200, 200, 200, 1))
# Use OnHover events instead of Self.IsHovered
```

### 7.12 Button Property Errors
**NEVER USE** these properties for Classic/Button:

```yaml
# ‚ùå WRONG - Invalid button properties
Properties:
  BorderRadius: =8        # Not supported for Classic/Button
  Disabled: =true         # Use DisplayMode instead
  Align: =Align.Center    # Not supported for buttons

# ‚úÖ CORRECT - Valid button properties
Properties:
  DisplayMode: =If(varIsDisabled, DisplayMode.Disabled, DisplayMode.Edit)
  # BorderRadius not available for Classic/Button
  # Use Fill and other styling properties instead
```

### 7.13 Rectangle Radius Errors
**NEVER USE** individual corner radius properties for Rectangle:

```yaml
# ‚ùå WRONG - Individual corner radius not supported
Properties:
  RadiusBottomLeft: =8
  RadiusBottomRight: =8
  RadiusTopLeft: =8
  RadiusTopRight: =8

# ‚úÖ CORRECT - Use uniform BorderRadius
Properties:
  BorderRadius: =8
```

---

## 8. BEST PRACTICES

### 8.1 Component Structure Best Practices
- Always use `ComponentDefinitions` (plural) as root
- Include component name as child of `ComponentDefinitions`
- Always include `Properties` section with `Height` and `Width`
- Use descriptive `DisplayName` and `Description` for all custom properties
- Group related custom properties logically

### 8.2 Custom Properties Best Practices
- Use `Input` for most custom properties
- Use `Event` for callback functions
- Use `Output` for computed values
- Always provide meaningful default values
- Include parameter definitions for event properties

### 8.3 Event Handling Best Practices
- Always call event properties with parentheses: `ComponentName.EventName()`
- Define parameters for events when needed
- Use `ReturnType: None` for most events
- Mark optional parameters with `IsOptional: true`

### 8.4 Consistency
- Use consistent naming patterns across similar controls
- Apply consistent spacing and sizing formulas
- Use consistent color schemes (RGBA values)

### 8.5 Relative References
**ALWAYS** use relative references:
```yaml
# Parent references
Width: =Parent.Width - 80
X: =Parent.X + 20

# Self references  
Height: =Self.Size * 1.2

# Other control references
Y: =HeaderControl.Y + HeaderControl.Height + 10
```

### 8.6 Hierarchy Maintenance
- Maintain clear parent-child relationships
- Use logical grouping with GroupContainer
- Keep related controls together in the YAML structure

### 8.7 Property Organization
Organize properties in this order:
1. Position (X, Y)
2. Size (Width, Height)  
3. Visual (Fill, Color, BorderColor)
4. Behavior (OnSelect, OnChange)
5. Content (Text, Items)
6. Other properties

```yaml
Properties:
  X: =Parent.X + 20
  Y: =Parent.Y + 10
  Width: =Parent.Width - 40
  Height: =40
  Fill: =RGBA(255, 255, 255, 1)
  Color: =RGBA(32, 54, 71, 1)
  BorderColor: =RGBA(230, 230, 230, 1)
  OnSelect: =Navigate(NextScreen)
  Text: ="Click me"
  FontWeight: =FontWeight.Semibold
```

---

## üö® CRITICAL REMINDERS

1. **CORRECT COMPONENT STRUCTURE** - Use `ComponentDefinitions` with proper custom property syntax
2. **NO ABSOLUTE VALUES** - Everything must be relative
3. **WRAP SPECIAL NAMES** - Use single quotes for names with special characters
4. **FORMULA PREFIX** - All dynamic properties start with `=`
5. **RGBA COLORS** - Always use RGBA format for colors
6. **RELATIVE POSITIONING** - Position everything relative to parent or other controls
7. **EVENT SYNTAX** - Call events with parentheses: `ComponentName.EventName()`
8. **CUSTOM PROPERTIES** - Use `PropertyKind`, `DataType`, `Default` (not old syntax)
9. **SINGLE LINE FORMULAS** - Never use multi-line formulas in YAML
10. **CONTROL REFERENCES** - Wrap control names with dots in single quotes
11. **VALID SELF PROPERTIES** - Never use `Self.Focused` or `Self.IsHovered`
12. **BUTTON PROPERTIES** - Never use `BorderRadius`, `Disabled`, or `Align` for Classic/Button
13. **RECTANGLE RADIUS** - Use `BorderRadius` only, not individual corner properties

**Agent must follow these rules ABSOLUTELY when generating Power App YAML code.**

