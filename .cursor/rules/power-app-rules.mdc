---
description: √Åp d·ª•ng khi t·∫°o, ƒëi·ªÅu ch·ªânh, s·ª≠a ƒë·ªïi view ho·∫∑c UI, view, ui, screen, layout, controls,... li√™n quan d·∫øn giao di·ªán cho power app
globs: 
alwaysApply: false
---
# POWER APP DEVELOPMENT RULES FOR AI AGENT

> **CRITICAL**: Agent MUST follow these rules ABSOLUTELY when creating or modifying Power App YAML files.

---

## üìã TABLE OF CONTENTS
1. [File Structure](mdc:#1-file-structure)
2. [Control Rules](mdc:#2-control-rules)
3. [Position & Size Rules](mdc:#3-position--size-rules)
4. [Allowed Controls](mdc:#4-allowed-controls)
5. [Properties Guidelines](mdc:#5-properties-guidelines)
6. [Icon Guidelines](mdc:#6-icon-guidelines)
7. [Naming Conventions](mdc:#7-naming-conventions)
8. [Common Mistakes](mdc:#8-common-mistakes)
9. [Best Practices](mdc:#9-best-practices)

---

## 1. FILE STRUCTURE

### 1.1 Screens (M√†n h√¨nh)
**REQUIRED**: All screen files MUST start with `Screens:`

```yaml
Screens:
  ScreenName:
    Properties:
      Fill: =RGBA(248, 250, 252, 1)
      OnVisible: =Set(varExample, "value")
    Children:
      - ControlName:
          Control: ControlType
          Properties:
            # Control properties here
```

### 1.2 Components (Th√†nh ph·∫ßn)
**REQUIRED**: All component files MUST use the CORRECT structure:

```yaml
# ‚úÖ CORRECT - Component Definition Structure
ComponentDefinitions:
  ComponentName:
    DefinitionType: CanvasComponent
    CustomProperties:
      PropertyName:
        PropertyKind: Input
        DisplayName: PropertyName
        Description: "Property description"
        DataType: Text
        Default: ="Default value"
    Properties:
      Height: =App.Height
      Width: =App.Width
    Children:
      - ControlName:
          Control: ControlType
          Properties:
            # Control properties here

# ‚ùå WRONG - Old/Invalid Structure
ComponentDefinition:
  DefinitionType: CanvasComponent
  CustomProperties:
    - PropertyName:
        PropertyType: Data
        PropertyDataType: Text
        DefaultValue: ="Default"
```

### 1.3 Custom Properties Data Types
**ONLY** these data types are allowed for `DataType`:
- `Text` - String values
- `Number` - Numeric values  
- `Boolean` - True/false values
- `Date and time` - Date/time values
- `Screen` - Screen references
- `Record` - Single record
- `Table` - Data tables
- `Image` - Image data
- `Video or audio` - Media files
- `Color` - Color values
- `Currency` - Currency values

### 1.4 Custom Property Kinds
**ONLY** these property kinds are allowed for `PropertyKind`:
- `Input` - Input properties (most common)
- `Output` - Output properties
- `Event` - Event properties

### 1.5 Event Properties Structure
**REQUIRED**: Event properties MUST follow this structure:

```yaml
# ‚úÖ CORRECT - Event Property Structure
OnNavigate:
  PropertyKind: Event
  DisplayName: OnNavigate
  Description: "Event description"
  ReturnType: None
  Default: =
  Parameters:
    - ParameterName:
        Description: "Parameter description"
        DataType: Text
        IsOptional: true
        Default: ="Default value"

# ‚ùå WRONG - Invalid Event Structure
- OnNavigate:
    PropertyType: Event
    PropertyDataType: Text
    DefaultValue: =""
```

---

## 2. CONTROL RULES

### 2.1 Version Restriction
**FORBIDDEN**: Never include version numbers in Control declarations

```yaml
# ‚úÖ CORRECT
Control: GroupContainer

# ‚ùå WRONG
Control: GroupContainer@1.3.0
```

### 2.2 Component Control Declarations
**CRITICAL**: Use correct syntax for component references

```yaml
# ‚úÖ CORRECT - Component Usage
Control: CanvasComponent
ComponentName: HeaderComponent

# ‚ùå WRONG - Direct Component Reference
Control: HeaderComponent
```

### 2.3 Forbidden Properties
**NEVER USE** these properties:
- `ZIndex` - Not supported
- `DropShadow` - Use only when certain the control supports it

### 2.4 Forbidden Properties by Control Type
**Rectangle Control** - NEVER use these properties:
- `RadiusBottomLeft` - Not supported
- `RadiusBottomRight` - Not supported  
- `RadiusTopLeft` - Not supported
- `RadiusTopRight` - Not supported
- Use `BorderRadius` instead for uniform radius

**Classic/Button Control** - NEVER use these properties:
- `BorderRadius` - Not supported for Classic/Button
- `Disabled` - Use `DisplayMode` instead
- `Align` - Not supported for buttons

**Classic/TextInput Control** - NEVER use these properties:
- `Self.Focused` - Not recognized, use `Self.Focus` instead
- `Self.IsHovered` - Not recognized, use hover events instead

### 2.5 Required Properties for All Controls
Every control MUST have these properties when applicable:
- `X` - Horizontal position (relative to parent)
- `Y` - Vertical position (relative to parent)  
- `Width` - Control width (relative to parent)
- `Height` - Control height (relative to parent)

---

## 3. POSITION & SIZE RULES

### 3.1 Width and Height - MANDATORY RELATIVE POSITIONING
**NEVER** use absolute values. Always reference parent or other controls.

```yaml
# ‚úÖ CORRECT Examples
Width: =Parent.Width * (3/2)
Height: =Parent.Height / 3
Width: =(Parent.Width - Control.Width) / 2
Height: =Self.Width

# ‚ùå WRONG Examples  
Width: 400
Height: 200
Width: =400
```

### 3.2 X and Y Positioning - MANDATORY RELATIVE POSITIONING
**ALWAYS** position relative to parent or other controls.

```yaml
# ‚úÖ CORRECT Examples
X: =Parent.X /2
Y: =HeaderControl.Y + HeaderControl.Height
X: =(Parent.Width - Self.Width) / 2
Y: =Parent.Height - Self.Height 

# ‚ùå WRONG Examples
X: 100
Y: 50
```

### 3.3 Arithmetic Operations - AVOID FIXED NUMBERS
**CRITICAL**: Minimize use of fixed numbers in positioning/sizing calculations. Prefer relative calculations.

```yaml
# ‚úÖ PREFERRED - Relative calculations
Height: =Parent.Height / 2 - Control1.Height / 4
Width: =Parent.Width * 0.8 - SidePanel.Width
X: =Self.Width + Parent.X
Y: =HeaderControl.Y + HeaderControl.Height * 1.2
Size: =Parent.Width / 20

# ‚ö†Ô∏è DISCOURAGED - Fixed numbers (use sparingly)
Height: =Parent.Height / 2 - 4
Width: =Parent.Width - 20
X: =Self.Width + 10
Y: =HeaderControl.Y + 5
Size: =14

# ‚ùå WRONG - Pure fixed values
Height: 200
Width: 300
X: 50
Y: 100
```

**GUIDELINES for Arithmetic Operations**:
- **PREFER**: Multiplication (`*`) and division (`/`) with percentages/ratios
- **PREFER**: Addition (`+`) and subtraction (`-`) with other control properties
- **DISCOURAGE**: Addition (`+`) and subtraction (`-`) with fixed numbers
- **AVOID**: Pure fixed number values

**ACCEPTABLE Fixed Number Usage**:
- Small spacing adjustments (< 10 pixels): `X: =Parent.X + 5`
- Standard margins/padding: `Width: =Parent.Width - 20`
- Font sizes: `Size: =14` (when not relative to screen size)

**PREFERRED Alternatives**:
```yaml
# Instead of fixed spacing
X: =Parent.X + Parent.Width * 0.01  # 1% of parent width
Width: =Parent.Width * 0.95         # 95% of parent width

# Instead of fixed margins
X: =Parent.X + Self.Height / 4      # Quarter of own height
Y: =PrevControl.Y + PrevControl.Height / 2  # Half of previous control height
```

### 3.4 Screen-Level Properties
For screens, use these specific properties:

```yaml
Properties:
  Fill: =RGBA(248, 250, 252, 1)
  # Width and Height are automatically handled by Power Apps
```

---

## 4. ALLOWED CONTROLS

### 4.1 Input Controls
```yaml
# Text Input
Control: Classic/TextInput

# Buttons  
Control: Classic/Button

# Date Selection
Control: Classic/DatePicker

# Dropdowns
Control: Classic/DropDown
Control: Classic/ComboBox

# Selection Controls
Control: Classic/CheckBox
Control: Classic/Radio
Control: Classic/Toggle
Control: Classic/Slider
Control: Rating
Control: PenInput
```

### 4.2 Display Controls
```yaml
# Text Display
Control: Label

# Media Display
Control: Image
Control: HtmlViewer
Control: RichTextEditor
Control: PDFViewer

# Icons
Control: Classic/Icon
```

### 4.3 Layout Controls
```yaml
# Containers
Control: GroupContainer
Control: Rectangle

# Data Display
Control: Gallery
Control: Form
Control: FormViewer
Control: DataTable
```

### 4.4 Component Controls
```yaml
# Canvas Components
Control: CanvasComponent
ComponentName: ComponentName
```

### 4.5 Shape Controls
```yaml
Control: Circle
Control: Triangle
Control: Pentagon
Control: Octagon
Control: Star
Control: Arrow
Control: PartialCircle
```

### 4.6 Chart Controls
```yaml
Control: BarChart
Control: LineChart
Control: PieChart
Control: Legend
```

### 4.7 Media & Data Controls
```yaml
# Media
Control: AddMedia
Control: Timer

# Data
Control: Import
Control: Export
Control: ListBox
Control: PowerBI
```

---

## 5. PROPERTIES GUIDELINES

### 5.1 Color Properties
**ALWAYS** use RGBA format:

```yaml
Fill: =RGBA(255, 255, 255, 1)
Color: =RGBA(32, 54, 71, 1)
BorderColor: =RGBA(230, 230, 230, 1)
```

### 5.2 DropShadow Properties
**ONLY** use these values:
```yaml
DropShadow: =DropShadow.Light
DropShadow: =DropShadow.Regular
DropShadow: =DropShadow.Bold
DropShadow: =DropShadow.ExtraBold
DropShadow: =DropShadow.Semilight
DropShadow: =DropShadow.None
```

### 5.3 Font Properties
```yaml
FontWeight: =FontWeight.Bold
FontWeight: =FontWeight.Semibold
FontWeight: =FontWeight.Normal
Font: =Font.'Open Sans'
```

### 5.4 Formula Properties
**ALL** dynamic properties MUST start with `=`:

```yaml
# ‚úÖ CORRECT
Visible: =varShowControl
Text: =Concatenate("Hello ", varUserName)
Fill: =If(Self.IsHovered, RGBA(0, 120, 212, 1), RGBA(255, 255, 255, 1))

# ‚ùå WRONG
Visible: varShowControl
Text: "Static text" # Use this only for truly static text
```

### 5.5 Icon Properties
**ONLY** use valid icon references:

```yaml
# ‚úÖ CORRECT - Valid Icons
Icon: =Icon.CalendarBlank
Icon: =Icon.CheckBadge
Icon: =Icon.Clock
Icon: =Icon.Cancel

# ‚ùå WRONG - Invalid Icons
Icon: =Icon.Calendar  # Does not exist
```

### 5.6 Text Formatting
**PROPER** text concatenation formatting:

```yaml
# ‚úÖ CORRECT - Proper spacing
Text: ="Email:" & " " & ThisItem.Email
Text: ="Status:" & " " & ThisItem.Status

# ‚ùå WRONG - Space inside quotes
Text: ="Email: " & ThisItem.Email
Text: ="Status: " & ThisItem.Status
```

### 5.7 Variants for Controls
```yaml
# GroupContainer
Variant: ManualLayout
Variant: AutoLayout

# Gallery
Variant: Vertical
Variant: Horizontal
Variant: VariableHeight

# Form
Variant: Classic

# Arrow
Variant: BackArrow

# Star
Variant: 5Points
Variant: 6Points
Variant: 8Points
Variant: 12Points
```

---

## 6. ICON GUIDELINES

### 6.1 Allowed Icons
**CRITICAL**: Icons can ONLY be used from this approved list. Using any icon not in this list will cause errors.

**ALLOWED ICONS:**
```yaml
Add, AddDocument, AddLibrary, AddToCalendar, AddUser, Airplane, Alarm, ArrowDown, ArrowLeft, ArrowRight, ArrowUp, BackArrow, Bell, Blocked, Bookmark, BookmarkFilled, Bug, Bus, Calculator, CalendarBlank, Camera, CameraAperture, Cancel, CancelBadge, Cars, Check, CheckBadge, ChevronDown, ChevronLeft, ChevronRight, ChevronUp, ClearDrawing, Clock, CollapseView, ColorPicker, Compose, ComputerDesktop, Controller, Copy, Crop, Currency, Cut, Database, DetailList, Devices, Diamond, DockCheckProperties, DockLeft, DockRight, Document, DocumentPDF, DocumentWithContent, Download, Draw, Edit, EmojiFrown, EmojiHappy, EmojiNeutral, EmojiSad, EmojiSmile, Enhance, Erase, Error, ExpandView, Export, Filter, FilterFlat, FilterFlatFilled, Flag, Folder, ForkKnife, Globe, GlobeChangesPending, GlobeError, GlobeNotConnected, GlobeRefresh, GlobeWarning, HalfFilledCircle, Hamburger, Health, Heart, Help, Hide, History, Home, HorizontalLine, Hospital, Import, Information, Items, Journal, Key, Laptop, Leave, LevelsLayersItems, Lightbulb, LightningBolt, LikeDislike, LineWeight, Link, ListScrollEmpty, ListScrollWatchlist, ListWatchlistRemind, Location, Lock, LogJournal, Mail, Manufacture, Medical, Message, Microphone, Mobile, Money, More, Newspaper, NextArrow, Note, Notebook, OpenInNewWindow, OptionsList, PaperClip, Paste, People, Person, Phone, Phonebook, Pictures, Pin, Post, Print, Printing3D, Publish, QuestionMark, RadarActivityMonitor, Redo, Reload, Save, Scan, Search, Send, Settings, Share, Shirt, Shop, ShoppingCart, Show, ShowDrawing, ShoppingCart, ShowDrawing, SignOut, Site, SkipBack, SkipForward, SkipNext, SkipPrevious, Slider, Sort, Speed, Split, SplitHorizontal, SplitVertical, Star, StarFilled, Stop, Strikethrough, Subtract, Support, Sync, Tablet, Tag, Text, ThumbsDown, ThumbsDownFilled, ThumbsUp, ThumbsUpFilled, Tools, Train, Transportation, Trash, Tray, Trending, TrendingHashtag, TrendingUpwards, Undo, Unlock, VerticalLine, Video, View, Waffle, Warning, Waypoint, Weather, ZoomIn, ZoomOut
```

### 6.2 Icon Usage Examples
```yaml
# ‚úÖ CORRECT - Using allowed icons
Icon: =Icon.CalendarBlank
Icon: =Icon.Person
Icon: =Icon.Settings
Icon: =Icon.Search
Icon: =Icon.Add

# ‚ùå WRONG - Using non-allowed icons
Icon: =Icon.CustomIcon      # Not in allowed list
Icon: =Icon.MyIcon         # Not in allowed list
Icon: =Icon.SpecialIcon    # Not in allowed list
```

### 6.3 Icon Mapping for Common Use Cases
```yaml
# User/Profile related
"User" ‚Üí Icon.Person
"Profile" ‚Üí Icon.Person
"Account" ‚Üí Icon.Person

# Calendar/Date related
"Calendar" ‚Üí Icon.CalendarBlank
"Date" ‚Üí Icon.CalendarBlank
"Schedule" ‚Üí Icon.CalendarBlank

# Communication
"Email" ‚Üí Icon.Mail
"Message" ‚Üí Icon.Message
"Call" ‚Üí Icon.Phone

# Actions
"Add" ‚Üí Icon.Add
"Edit" ‚Üí Icon.Edit
"Delete" ‚Üí Icon.Cancel
"Save" ‚Üí Icon.Save
"Search" ‚Üí Icon.Search

# Navigation
"Back" ‚Üí Icon.BackArrow
"Next" ‚Üí Icon.NextArrow
"Up" ‚Üí Icon.ChevronUp
"Down" ‚Üí Icon.ChevronDown
"Left" ‚Üí Icon.ChevronLeft
"Right" ‚Üí Icon.ChevronRight

# Status
"Success" ‚Üí Icon.CheckBadge
"Error" ‚Üí Icon.Error
"Warning" ‚Üí Icon.Warning
"Info" ‚Üí Icon.Information
```

---

## 7. NAMING CONVENTIONS

### 7.1 Special Character Handling
**REQUIRED**: Wrap names with special characters in single quotes:

```yaml
# ‚úÖ CORRECT - Names with special characters
- 'Header.Logo':
- 'Login Container':
- 'User-Info':
- 'Data View 1':
- 'My.Control.Name':

# ‚úÖ CORRECT - Simple names (no quotes needed)
- HeaderLogo:
- LoginContainer:
- UserInfo:
```

### 7.2 Naming Best Practices
```yaml
# Use descriptive, hierarchical names
- 'Header.UserInfo.Avatar':
- 'LoginForm.UsernameInput':
- 'Dashboard.StatsCard.Title':
- 'Navigation.MenuButton':
```

---

## 8. COMMON MISTAKES TO AVOID

### 8.1 Component Definition Structure Errors
**CRITICAL**: Use the correct component structure:

```yaml
# ‚ùå WRONG - Old/Invalid Structure
ComponentDefinition:
  DefinitionType: CanvasComponent
  CustomProperties:
    - UserRole:
        PropertyType: Data
        PropertyDataType: Text
        DefaultValue: ="Employee"

# ‚úÖ CORRECT - New/Valid Structure
ComponentDefinitions:
  NavigationComponent:
    DefinitionType: CanvasComponent
    CustomProperties:
      UserRole:
        PropertyKind: Input
        DisplayName: UserRole
        Description: "Vai tr√≤ c·ªßa ng∆∞·ªùi d√πng"
        DataType: Text
        Default: ="Employee"
    Properties:
      Height: =App.Height
      Width: =App.Width
```

### 8.2 Component Control Declaration Errors
**CRITICAL**: Use correct component control syntax:

```yaml
# ‚ùå WRONG - Direct Component Reference
Control: HeaderComponent
Control: NavigationComponent
Control: StatsCardComponent

# ‚úÖ CORRECT - Proper Component Usage
Control: CanvasComponent
ComponentName: HeaderComponent

Control: CanvasComponent
ComponentName: NavigationComponent

Control: CanvasComponent
ComponentName: StatsCardComponent
```

### 8.3 Custom Properties Errors
**NEVER USE** these old property names:
- `PropertyType` ‚Üí Use `PropertyKind`
- `PropertyDataType` ‚Üí Use `DataType`
- `DefaultValue` ‚Üí Use `Default`

**ALWAYS INCLUDE** these required fields:
- `DisplayName` - Human readable name
- `Description` - Property description
- `DataType` - Data type
- `Default` - Default value

### 8.4 Event Property Errors
**WRONG** event structure:
```yaml
# ‚ùå WRONG
- OnNavigate:
    PropertyType: Event
    PropertyDataType: Text
    DefaultValue: =""
```

**CORRECT** event structure:
```yaml
# ‚úÖ CORRECT
OnNavigate:
  PropertyKind: Event
  DisplayName: OnNavigate
  Description: "S·ª± ki·ªán khi chuy·ªÉn m√†n h√¨nh"
  ReturnType: None
  Default: =
  Parameters:
    - ScreenName:
        Description: "T√™n m√†n h√¨nh"
        DataType: Text
        IsOptional: true
        Default: ="Dashboard"
```

### 8.5 Event Call Syntax Errors
**WRONG** event call syntax:
```yaml
# ‚ùå WRONG
OnSelect: =NavigationComponent.OnNavigate; Set(varActiveScreen, "Dashboard")
```

**CORRECT** event call syntax:
```yaml
# ‚úÖ CORRECT
OnSelect: =NavigationComponent.OnNavigate(); Set(varActiveScreen, "Dashboard")
```

### 8.6 Text Property Formatting
**AVOID** spaces after colons in text content:

```yaml
# ‚úÖ CORRECT
Text: ="Demo:" & " " & "Ph·∫ßn l·ªõn c·ªßa ·ª©ng d·ª•ng"
Text: ="Email:" & " " & ThisItem.Email

# ‚ùå WRONG  
Text: ="Demo: Ph·∫ßn l·ªõn c·ªßa ·ª©ng d·ª•ng"
Text: ="Email: " & ThisItem.Email
```

### 8.7 Absolute Positioning
**NEVER** use absolute values for positioning:

```yaml
# ‚ùå WRONG
X: 100
Y: 200
Width: 300
Height: 150

# ‚úÖ CORRECT
X: =Parent.X + 20
Y: =PreviousControl.Y + PreviousControl.Height + 10
Width: =Parent.Width - 40
Height: =Parent.Height / 4
```

### 8.8 Fixed Numbers in Calculations
**CRITICAL**: Avoid excessive use of fixed numbers in positioning/sizing calculations:

```yaml
# ‚ùå DISCOURAGED - Too many fixed numbers
X: =Parent.X + 20
Y: =HeaderControl.Y + 50
Width: =Parent.Width - 40
Height: =Parent.Height / 2 - 30
Size: =16

# ‚úÖ PREFERRED - Relative calculations
X: =Parent.X + Parent.Width * 0.02
Y: =HeaderControl.Y + HeaderControl.Height * 1.5
Width: =Parent.Width * 0.95
Height: =Parent.Height / 2 - HeaderControl.Height / 3
Size: =Parent.Width / 50

# ‚úÖ ACCEPTABLE - Small fixed adjustments
X: =Parent.X + 5        # Small spacing
Width: =Parent.Width - 10   # Standard margin
Size: =14               # Standard font size
```

**RULES for Fixed Numbers**:
- **AVOID**: Large fixed numbers (> 20 pixels)
- **MINIMIZE**: Small fixed numbers (< 10 pixels)
- **PREFER**: Percentage-based calculations
- **USE**: Relative calculations with other control properties

### 8.9 Missing Required Properties
**ALWAYS** include these for positioned controls:

```yaml
Properties:
  X: =Parent.X + 20
  Y: =Parent.Y + 10
  Width: =Parent.Width - 40
  Height: =40
  # Other properties...
```

### 8.10 Missing Component-Level Properties
**ALWAYS** include these for components:

```yaml
ComponentDefinitions:
  ComponentName:
    DefinitionType: CanvasComponent
    CustomProperties:
      # Custom properties here
    Properties:
      Height: =App.Height
      Width: =App.Width
    Children:
      # Child controls here
```

### 8.11 YAML Syntax for Multi-line Formulas
**CRITICAL**: Use correct YAML syntax for formulas:

#### For Short Formulas (Single Line):
```yaml
# ‚úÖ CORRECT - Single line formula
OnSelect: =Set(varExample, true); Navigate(NextScreen)
```

#### For Long Formulas (Multi-line with Pipe Operator):
```yaml
# ‚úÖ CORRECT - Multi-line formula with pipe operator
OnVisible: |
  =Set(varActiveScreen, "Dashboard"); Set(varDemoStats, {TotalLeave: 12, UsedLeave: 3, RemainingLeave: 9}); Set(varRecentRequests, Table({ID: "LR001", Date: "2024-01-15", Days: 3, Status: "Approved"}))

OnSelect: |
  =Set(varIsLoading, true); Set(varLoginError, ""); If(And(Not(IsBlank('Login.Email.Input'.Text)), Not(IsBlank('Login.Password.Input'.Text))), Set(varCurrentUser, {ID: "EMP001", FullName: "Nguy·ªÖn VƒÉn An", Email: 'Login.Email.Input'.Text, Role: "Employee", Department: "Ph√≤ng C√¥ng ngh·ªá th√¥ng tin"}); Set(varIsLoading, false); Navigate(DashboardScreen), Set(varLoginError, "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng"); Set(varIsLoading, false))

# ‚ùå WRONG - Multi-line without pipe operator causes YAML parsing error
OnVisible: =Set(varActiveScreen, "Dashboard"); Set(varDemoStats, {TotalLeave: 12, UsedLeave: 3, RemainingLeave: 9}); 
          Set(varRecentRequests, Table({ID: "LR001", Date: "2024-01-15", Days: 3, Status: "Approved"}))
```

**RULES for Multi-line Formulas:**
- **ALWAYS** use pipe operator (`|`) for formulas longer than 120 characters
- **ALWAYS** place the pipe operator (`|`) immediately after the property name and colon
- **ALWAYS** indent the formula content with proper spacing (typically 2 spaces)
- **NEVER** split formula without using pipe operator
- **ESPECIALLY** use for `OnSelect`, `OnChange`, `OnVisible` with complex logic

### 8.12 Control Reference Errors
**CRITICAL**: Use single quotes for control names with dots:

```yaml
# ‚ùå WRONG - Dot operator error
Text: =LoginCard.FormSection.UsernameInput.Text

# ‚úÖ CORRECT - Wrap in single quotes
Text: ='LoginCard.FormSection.UsernameInput'.Text
```

### 8.13 Invalid Self Properties
**NEVER USE** these invalid Self properties:

```yaml
# ‚ùå WRONG - Invalid Self properties
BorderColor: =If(Self.Focused, RGBA(0, 120, 212, 1), RGBA(200, 200, 200, 1))
Fill: =If(Self.IsHovered, RGBA(240, 240, 240, 1), RGBA(255, 255, 255, 1))

# ‚úÖ CORRECT - Use valid properties or events
BorderColor: =If(Self.Focus, RGBA(0, 120, 212, 1), RGBA(200, 200, 200, 1))
# Use OnHover events instead of Self.IsHovered
```

### 8.14 Button Property Errors
**NEVER USE** these properties for Classic/Button:

```yaml
# ‚ùå WRONG - Invalid button properties
Properties:
  BorderRadius: =8        # Not supported for Classic/Button
  Disabled: =true         # Use DisplayMode instead
  Align: =Align.Center    # Not supported for buttons

# ‚úÖ CORRECT - Valid button properties
Properties:
  DisplayMode: =If(varIsDisabled, DisplayMode.Disabled, DisplayMode.Edit)
  # BorderRadius not available for Classic/Button
  # Use Fill and other styling properties instead
```

### 8.15 Rectangle Radius Errors
**NEVER USE** individual corner radius properties for Rectangle:

```yaml
# ‚ùå WRONG - Individual corner radius not supported
Properties:
  RadiusBottomLeft: =8
  RadiusBottomRight: =8
  RadiusTopLeft: =8
  RadiusTopRight: =8

# ‚úÖ CORRECT - Use uniform BorderRadius
Properties:
  BorderRadius: =8
```

### 8.16 Invalid Icon References
**NEVER USE** non-existent icons:

```yaml
# ‚ùå WRONG - Non-existent icons
Icon: =Icon.Calendar        # Should be Icon.CalendarBlank
Icon: =Icon.BarChart        # Should be Icon.BarChart4
Icon: =Icon.Document        # Should be Icon.DocumentText
Icon: =Icon.CustomIcon      # Not in Power Apps
Icon: =Icon.MyIcon         # Not in Power Apps

# ‚úÖ CORRECT - Valid icon references
Icon: =Icon.CalendarBlank
Icon: =Icon.BarChart4
Icon: =Icon.DocumentText
Icon: =Icon.Person
Icon: =Icon.Settings
```

### 8.17 Invalid Icon Usage from Approved List
**CRITICAL**: Only use icons from the approved list in section 6.1:

```yaml
# ‚ùå WRONG - Using non-approved icons (even if they exist in Power Apps)
Icon: =Icon.CustomIcon
Icon: =Icon.MySpecialIcon
Icon: =Icon.UndefinedIcon
Icon: =Icon.RandomIcon

# ‚úÖ CORRECT - Using approved icons only
Icon: =Icon.CalendarBlank
Icon: =Icon.Person
Icon: =Icon.Settings
Icon: =Icon.Search
Icon: =Icon.Add
Icon: =Icon.Edit
Icon: =Icon.Cancel
Icon: =Icon.Save
```

### 8.18 Text Function with RGBA Values
**CRITICAL**: Never use Text() function with RGBA values:

```yaml
# ‚ùå WRONG - Text() cannot convert RGBA values
Text: =Concatenate("Color: ", Text(RGBA(255, 0, 0, 1)))
Text: =Text(RGBA(59, 130, 246, 1))

# ‚úÖ CORRECT - Use string literals for RGBA in text
Text: =Concatenate("Color: RGBA(255, 0, 0, 1)")
Text: ="Primary: RGBA(59, 130, 246, 1)"
```

### 8.19 Invalid Focus Properties for TextInput
**CRITICAL**: Use correct focus properties for Classic/TextInput:

```yaml
# ‚ùå WRONG - .Focus does not exist for Classic/TextInput
Visible: ='MyTextInput'.Focus
BorderColor: =If('MyTextInput'.Focus, RGBA(0, 120, 212, 1), RGBA(200, 200, 200, 1))

# ‚úÖ CORRECT - Use .Focused for Classic/TextInput
Visible: ='MyTextInput'.Focused
BorderColor: =If('MyTextInput'.Focused, RGBA(0, 120, 212, 1), RGBA(200, 200, 200, 1))
```

### 8.20 Multi-line Formula Syntax Errors
**CRITICAL**: Avoid pipe operator (|) in YAML - use single line formulas:

```yaml
# ‚ùå WRONG - Pipe operator causes YAML parsing issues
Text: |
  =Concatenate(
    "Line 1",
    "Line 2"
  )

# ‚úÖ CORRECT - Single line formula
Text: =Concatenate("Line 1", "Line 2")
```

---

## 9. BEST PRACTICES

### 9.1 Component Structure Best Practices
- Always use `ComponentDefinitions` (plural) as root
- Include component name as child of `ComponentDefinitions`
- Always include `Properties` section with `Height` and `Width`
- Use descriptive `DisplayName` and `Description` for all custom properties
- Group related custom properties logically

### 9.2 Component Control Declaration Best Practices
- Always use `Control: CanvasComponent` for component references
- Always include `ComponentName: ComponentName` property
- Never use direct component references like `Control: HeaderComponent`
- Maintain consistent indentation for component properties

### 9.3 Custom Properties Best Practices
- Use `Input` for most custom properties
- Use `Event` for callback functions
- Use `Output` for computed values
- Always provide meaningful default values
- Include parameter definitions for event properties

### 9.4 Event Handling Best Practices
- Always call event properties with parentheses: `ComponentName.EventName()`
- Define parameters for events when needed
- Use `ReturnType: None` for most events
- Mark optional parameters with `IsOptional: true`

### 9.5 Multi-line Formula Best Practices
- Use pipe operator (`|`) for formulas longer than 120 characters
- Maintain consistent indentation (2 spaces recommended)
- Keep the entire formula logic on the indented line after the pipe
- Use for complex `OnSelect`, `OnChange`, `OnVisible` properties
- Apply to both OnVisible and OnSelect formulas consistently

### 9.6 Text Formatting Best Practices
- Always separate colon and space in text concatenation
- Use `"Label:" & " " & Value` instead of `"Label: " & Value`
- Maintain consistency across all text properties
- Avoid spaces after colons in quoted strings

### 9.7 Icon Reference Best Practices
- Always verify icon names exist in Power Apps
- Use `Icon.CalendarBlank` instead of `Icon.Calendar`
- Use `Icon.CheckBadge` for checkmarks
- Use `Icon.Cancel` for cancel/close actions
- Test icon references in Power Apps Studio

### 9.8 Consistency
- Use consistent naming patterns across similar controls
- Apply consistent spacing and sizing formulas
- Use consistent color schemes (RGBA values)
- Maintain consistent component declaration patterns

### 9.9 Relative References
**ALWAYS** use relative references:
```yaml
# Parent references
Width: =Parent.Width - 80
X: =Parent.X + 20

# Self references  
Height: =Self.Size * 1.2

# Other control references
Y: =HeaderControl.Y + HeaderControl.Height + 10
```

### 9.10 Relative Calculations Best Practices
**CRITICAL**: Minimize fixed numbers in favor of relative calculations:

```yaml
# ‚úÖ EXCELLENT - Fully relative
X: =Parent.X + Parent.Width * 0.05
Y: =HeaderControl.Y + HeaderControl.Height * 1.2
Width: =Parent.Width * 0.9
Height: =Parent.Height / 3 - SidePanel.Height / 4

# ‚úÖ GOOD - Mostly relative with minimal fixed numbers
X: =Parent.X + 5
Y: =HeaderControl.Y + HeaderControl.Height + 2
Width: =Parent.Width - 10
Height: =Parent.Height / 3

# ‚ö†Ô∏è ACCEPTABLE - Some fixed numbers for standard spacing
X: =Parent.X + 20
Width: =Parent.Width - 40
Size: =14

# ‚ùå POOR - Too many fixed numbers
X: =Parent.X + 50
Y: =100
Width: =Parent.Width - 80
Height: =200
```

**CALCULATION PREFERENCES** (in order):
1. **Percentage/Ratio calculations**: `Width: =Parent.Width * 0.8`
2. **Relative to other controls**: `Y: =Control1.Y + Control1.Height`
3. **Mathematical relationships**: `Height: =Self.Width / 2`
4. **Small fixed adjustments**: `X: =Parent.X + 5`
5. **Standard fixed values**: `Size: =14` (fonts, borders)

### 9.11 Hierarchy Maintenance
- Maintain clear parent-child relationships
- Use logical grouping with GroupContainer
- Keep related controls together in the YAML structure

### 9.12 Property Organization
Organize properties in this order:
1. Position (X, Y)
2. Size (Width, Height)  
3. Visual (Fill, Color, BorderColor)
4. Behavior (OnSelect, OnChange)
5. Content (Text, Items)
6. Other properties

```yaml
Properties:
  X: =Parent.X + 20
  Y: =Parent.Y + 10
  Width: =Parent.Width - 40
  Height: =40
  Fill: =RGBA(255, 255, 255, 1)
  Color: =RGBA(32, 54, 71, 1)
  BorderColor: =RGBA(230, 230, 230, 1)
  OnSelect: =Navigate(NextScreen)
  Text: ="Click me"
  FontWeight: =FontWeight.Semibold
```

---

## üö® CRITICAL REMINDERS

1. **CORRECT COMPONENT STRUCTURE** - Use `ComponentDefinitions` with proper custom property syntax
2. **NO ABSOLUTE VALUES** - Everything must be relative
3. **WRAP SPECIAL NAMES** - Use single quotes for names with special characters
4. **FORMULA PREFIX** - All dynamic properties start with `=`
5. **RGBA COLORS** - Always use RGBA format for colors
6. **RELATIVE POSITIONING** - Position everything relative to parent or other controls
7. **EVENT SYNTAX** - Call events with parentheses: `ComponentName.EventName()`
8. **CUSTOM PROPERTIES** - Use `PropertyKind`, `DataType`, `Default` (not old syntax)
9. **SINGLE LINE FORMULAS** - Never use multi-line formulas in YAML
10. **CONTROL REFERENCES** - Wrap control names with dots in single quotes
11. **VALID SELF PROPERTIES** - Never use `Self.Focused` or `Self.IsHovered`
12. **BUTTON PROPERTIES** - Never use `BorderRadius`, `Disabled`, or `Align` for Classic/Button
13. **RECTANGLE RADIUS** - Use `BorderRadius` only, not individual corner properties
14. **APPROVED ICONS ONLY** - Only use icons from the approved list in section 6.1
15. **VALID ICON NAMES** - Verify all icon references exist in Power Apps
16. **TEXT FUNCTION WITH RGBA** - Never use Text() function with RGBA values
17. **TEXTINPUT FOCUS PROPERTY** - Use `.Focused` not `.Focus` for Classic/TextInput
18. **NO PIPE OPERATOR** - Avoid pipe operator (|) in YAML formulas

**Agent must follow these rules ABSOLUTELY when generating Power App YAML code.**

