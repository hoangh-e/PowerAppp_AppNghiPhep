# POWER APP DEVELOPMENT RULES FOR AI AGENT

> **CRITICAL**: Agent MUST follow these rules ABSOLUTELY when creating or modifying Power App YAML files.

---

## üìã TABLE OF CONTENTS
1. [File Structure](mdc:#1-file-structure)
2. [Control Rules](mdc:#2-control-rules)
3. [Position & Size Rules](mdc:#3-position--size-rules)
4. [Control Z-Index & Rendering Order](mdc:#4-control-z-index--rendering-order)
5. [Allowed Controls](mdc:#5-allowed-controls)
6. [Properties Guidelines](mdc:#6-properties-guidelines)
7. [Icon Guidelines](mdc:#7-icon-guidelines)
8. [Naming Conventions](mdc:#8-naming-conventions)
9. [Common Mistakes](mdc:#9-common-mistakes)
10. [Best Practices](mdc:#10-best-practices)
11. [SharePoint Integration Rules](mdc:#11-sharepoint-integration-rules)

---

## 1. FILE STRUCTURE

### 1.1 Screens (M√†n h√¨nh)
**REQUIRED**: All screen files MUST start with `Screens:`

```yaml
Screens:
  ScreenName:
    Properties:
      Fill: =RGBA(248, 250, 252, 1)
      OnVisible: =Set(varExample, "value")
    Children:
      - ControlName:
          Control: ControlType
          Properties:
            # Control properties here
```

### 1.2 Components (Th√†nh ph·∫ßn)
**REQUIRED**: All component files MUST use the CORRECT structure:

```yaml
# ‚úÖ CORRECT - Component Definition Structure
ComponentDefinitions:
  ComponentName:
    DefinitionType: CanvasComponent
    CustomProperties:
      PropertyName:
        PropertyKind: Input
        DisplayName: PropertyName
        Description: "Property description"
        DataType: Text
        Default: ="Default value"
    Properties:
      Height: =App.Height
      Width: =App.Width
    Children:
      - ControlName:
          Control: ControlType
          Properties:
            # Control properties here

# ‚ùå WRONG - Old/Invalid Structure
ComponentDefinition:
  DefinitionType: CanvasComponent
  CustomProperties:
    - PropertyName:
        PropertyType: Data
        PropertyDataType: Text
        DefaultValue: ="Default"
```

### 1.3 Custom Properties Data Types
**ONLY** these data types are allowed for `DataType`:
- `Text` - String values
- `Number` - Numeric values  
- `Boolean` - True/false values
- `Date and time` - Date/time values
- `Screen` - Screen references
- `Record` - Single record
- `Table` - Data tables
- `Image` - Image data
- `Video or audio` - Media files
- `Color` - Color values
- `Currency` - Currency values

### 1.4 Custom Property Kinds
**ONLY** these property kinds are allowed for `PropertyKind`:
- `Input` - Input properties (most common)
- `Output` - Output properties
- `Event` - Event properties

### 1.5 Event Properties Structure
**REQUIRED**: Event properties MUST follow this structure:

```yaml
# ‚úÖ CORRECT - Event Property Structure
OnNavigate:
  PropertyKind: Event
  DisplayName: OnNavigate
  Description: "Event description"
  ReturnType: None
  Default: =
  Parameters:
    - ParameterName:
        Description: "Parameter description"
        DataType: Text
        IsOptional: true
        Default: ="Default value"

# ‚ùå WRONG - Invalid Event Structure
- OnNavigate:
    PropertyType: Event
    PropertyDataType: Text
    DefaultValue: =""
```

---

## 2. CONTROL RULES

### 2.1 Version Restriction
**FORBIDDEN**: Never include version numbers in Control declarations

```yaml
# ‚úÖ CORRECT
Control: GroupContainer

# ‚ùå WRONG
Control: GroupContainer@1.3.0
```

### 2.2 Component Control Declarations
**CRITICAL**: Use correct syntax for component references

```yaml
# ‚úÖ CORRECT - Component Usage
Control: CanvasComponent
ComponentName: HeaderComponent

# ‚ùå WRONG - Direct Component Reference
Control: HeaderComponent
```

### 2.3 Forbidden Properties
**NEVER USE** these properties:
- `ZIndex` - Not supported
- `DropShadow` - Use only when certain the control supports it

### 2.4 Forbidden Properties by Control Type
**Rectangle Control** - NEVER use these properties:
- `RadiusBottomLeft` - Not supported
- `RadiusBottomRight` - Not supported  
- `RadiusTopLeft` - Not supported
- `RadiusTopRight` - Not supported
- `Variant` - Rectangle does NOT support Variant property
- `DropShadow` - Rectangle does NOT support DropShadow property
- `BorderRadius` - Rectangle does NOT support BorderRadius property
- Use `BorderThickness` and `BorderColor` for visual effects instead

**Classic/Button Control** - NEVER use these properties:
- `BorderRadius` - Not supported for Classic/Button
- `Disabled` - Use `DisplayMode` instead
- `Align` - Not supported for buttons

**Classic/TextInput Control** - NEVER use these properties:
- `Self.Focused` - Not recognized, use `Self.Focus` instead
- `Self.IsHovered` - Not recognized, use hover events instead

### 2.5 Geometric Controls Container Restrictions
**CRITICAL**: Geometric controls (Rectangle, Circle, Triangle, etc.) CANNOT contain other controls as children.

```yaml
# ‚ùå WRONG - Geometric controls with Children
- 'MyContainer':
    Control: Rectangle
    Children:        # ‚ùå WRONG - Rectangle cannot have children
      - 'ChildControl':
          Control: Label

- 'MyShape':
    Control: Circle
    Children:        # ‚ùå WRONG - Circle cannot have children
      - 'InnerControl':
          Control: Classic/Button

# ‚úÖ CORRECT - Use geometric controls for visual purposes only
- 'Background.Shape':
    Control: Rectangle
    Properties:
      Fill: =RGBA(255, 255, 255, 1)
      # No Children property

# ‚úÖ CORRECT - Use GroupContainer for containers
- 'Content.Container':
    Control: GroupContainer
    Variant: ManualLayout
    Children:
      - 'Child.Control':
          Control: Label

# ‚úÖ CORRECT - Use DataTable for data display
- 'Data.Display':
    Control: DataTable
    Properties:
      Items: =MyCollection
```

**RULES for Container Usage:**
- **GroupContainer**: Use for layout containers and grouping controls
- **Rectangle/Circle/Triangle**: Use ONLY for backgrounds, borders, visual decoration
- **DataTable**: Use for displaying tabular data
- **Gallery**: Use for repeating data items with custom templates

**Geometric Controls Purpose:**
- **Rectangle**: Backgrounds, borders, visual separators
- **Circle**: Avatars backgrounds, decorative elements  
- **Triangle/Pentagon/etc.**: Icons, decorative shapes
- **Arrow**: Directional indicators, decorative elements

### 2.6 Required Properties for All Controls
Every control MUST have these properties when applicable:
- `X` - Horizontal position (relative to parent)
- `Y` - Vertical position (relative to parent)  
- `Width` - Control width (relative to parent)
- `Height` - Control height (relative to parent)

---

## 3. POSITION & SIZE RULES

### 3.1 Width and Height - MANDATORY RELATIVE POSITIONING
**NEVER** use absolute values. Always reference parent or other controls.

```yaml
# ‚úÖ CORRECT Examples
Width: =Parent.Width * (3/2)
Height: =Parent.Height / 3
Width: =(Parent.Width - Control.Width) / 2
Height: =Self.Width

# ‚ùå WRONG Examples  
Width: 400
Height: 200
Width: =400
```

### 3.2 X and Y Positioning - MANDATORY RELATIVE POSITIONING
**ALWAYS** position relative to parent or other controls.

```yaml
# ‚úÖ CORRECT Examples
X: =Parent.X /2
Y: =HeaderControl.Y + HeaderControl.Height
X: =(Parent.Width - Self.Width) / 2
Y: =Parent.Height - Self.Height 

# ‚ùå WRONG Examples
X: 100
Y: 50
```

### 3.3 Parent-Child Coordinate System - CRITICAL UNDERSTANDING
**MANDATORY**: When a control is inside a parent container, its coordinates are RELATIVE to the parent's boundaries.

```yaml
# ‚úÖ CORRECT - Child control positioning inside parent
- 'Parent.Container':
    Control: Rectangle
    Properties:
      X: =100  # Screen position
      Y: =50   # Screen position
      Width: =400
      Height: =300
    Children:
      - 'Child.Control':
          Control: Label
          Properties:
            X: =0           # = Parent.X (100) - left edge of parent
            Y: =0           # = Parent.Y (50) - top edge of parent
            Width: =Parent.Width    # = 400 - full parent width
            Height: =Parent.Height  # = 300 - full parent height

      - 'Child.Centered':
          Control: Classic/Button
          Properties:
            X: =(Parent.Width - Self.Width) / 2   # Centered in parent
            Y: =(Parent.Height - Self.Height) / 2  # Centered in parent
            Width: =Parent.Width * 0.8             # 80% of parent width
            Height: =50                            # Fixed height

      - 'Child.TopRight':
          Control: Classic/Icon
          Properties:
            X: =Parent.Width - Self.Width   # Right edge of parent
            Y: =0                           # Top edge of parent
            Width: =40
            Height: =40
```

#### **Parent-Child Coordinate Rules:**

**When Control B is inside Control A:**
- `B.X = 0` ‚Üí B starts at A's left edge
- `B.Y = 0` ‚Üí B starts at A's top edge  
- `B.X = Parent.Width` ‚Üí B starts at A's right edge
- `B.Y = Parent.Height` ‚Üí B starts at A's bottom edge
- `B.Width = Parent.Width` ‚Üí B spans A's full width
- `B.Height = Parent.Height` ‚Üí B spans A's full height

#### **Common Parent-Child Patterns:**

```yaml
# Full container coverage
X: =0
Y: =0
Width: =Parent.Width
Height: =Parent.Height

# Centered in container
X: =(Parent.Width - Self.Width) / 2
Y: =(Parent.Height - Self.Height) / 2

# Margin inside container
X: =Parent.Width * 0.05          # 5% left margin
Y: =Parent.Height * 0.05         # 5% top margin
Width: =Parent.Width * 0.9       # 90% width (5% margin each side)
Height: =Parent.Height * 0.9     # 90% height (5% margin each side)

# Positioned relative to other children
X: =SiblingControl.X + SiblingControl.Width + 10  # Next to sibling
Y: =SiblingControl.Y                               # Same Y as sibling

# Aligned to parent edges
X: =0                            # Left edge
X: =Parent.Width - Self.Width    # Right edge
Y: =0                            # Top edge
Y: =Parent.Height - Self.Height  # Bottom edge
```

#### **‚ùå WRONG Parent-Child Positioning:**

```yaml
# DON'T use absolute screen coordinates for child controls
- 'Parent.Container':
    Control: Rectangle
    Properties:
      X: =100
      Y: =50
      Width: =400
      Height: =300
    Children:
      - 'Child.Control':
          Control: Label
          Properties:
            X: =120    # ‚ùå WRONG - Absolute screen coordinate
            Y: =70     # ‚ùå WRONG - Absolute screen coordinate
            # Should be X: =20, Y: =20 (relative to parent)
```

#### **‚úÖ CORRECT Parent-Child Positioning:**

```yaml
# Use parent-relative coordinates
- 'Parent.Container':
    Control: Rectangle
    Properties:
      X: =100
      Y: =50
      Width: =400
      Height: =300
    Children:
      - 'Child.Control':
          Control: Label
          Properties:
            X: =20           # 20px from parent's left edge
            Y: =20           # 20px from parent's top edge
            Width: =Parent.Width - 40    # Parent width minus margins
            Height: =Parent.Height - 40  # Parent height minus margins
```

#### **Real-World Examples:**

```yaml
# Login Card with internal controls
- 'Login.Container':
    Control: Rectangle
    Properties:
      X: =(Parent.Width - Self.Width) / 2
      Y: =(Parent.Height - Self.Height) / 2
      Width: =400
      Height: =500
    Children:
      # Header at top of card
      - 'Login.Header':
          Control: Label
          Properties:
            X: =0                    # Left edge of card
            Y: =0                    # Top edge of card
            Width: =Parent.Width     # Full card width
            Height: =Parent.Height * 0.15  # 15% of card height

      # Input field in middle
      - 'Login.Input':
          Control: Classic/TextInput
          Properties:
            X: =Parent.Width * 0.1   # 10% margin from left
            Y: =Parent.Height * 0.4  # 40% from top
            Width: =Parent.Width * 0.8   # 80% of card width
            Height: =50              # Fixed height

      # Button at bottom
      - 'Login.Button':
          Control: Classic/Button
          Properties:
            X: =(Parent.Width - Self.Width) / 2  # Centered
            Y: =Parent.Height - Self.Height - 20 # 20px from bottom
            Width: =Parent.Width * 0.6           # 60% of card width
            Height: =50                          # Fixed height
```

### 3.4 Arithmetic Operations - AVOID FIXED NUMBERS
**CRITICAL**: Minimize use of fixed numbers in positioning/sizing calculations. Prefer relative calculations.

```yaml
# ‚úÖ PREFERRED - Relative calculations
Height: =Parent.Height / 2 - Control1.Height / 4
Width: =Parent.Width * 0.8 - SidePanel.Width
X: =Self.Width + Parent.X
Y: =HeaderControl.Y + HeaderControl.Height * 1.2
Size: =Parent.Width / 20

# ‚ö†Ô∏è DISCOURAGED - Fixed numbers (use sparingly)
Height: =Parent.Height / 2 - 4
Width: =Parent.Width - 20
X: =Self.Width + 10
Y: =HeaderControl.Y + 5
Size: =14

# ‚ùå WRONG - Pure fixed values
Height: 200
Width: 300
X: 50
Y: 100
```

**GUIDELINES for Arithmetic Operations**:
- **PREFER**: Multiplication (`*`) and division (`/`) with percentages/ratios
- **PREFER**: Addition (`+`) and subtraction (`-`) with other control properties
- **DISCOURAGE**: Addition (`+`) and subtraction (`-`) with fixed numbers
- **AVOID**: Pure fixed number values

**ACCEPTABLE Fixed Number Usage**:
- Small spacing adjustments (< 10 pixels): `X: =Parent.X + 5`
- Standard margins/padding: `Width: =Parent.Width - 20`
- Font sizes: `Size: =14` (when not relative to screen size)

**PREFERRED Alternatives**:
```yaml
# Instead of fixed spacing
X: =Parent.X + Parent.Width * 0.01  # 1% of parent width
Width: =Parent.Width * 0.95         # 95% of parent width

# Instead of fixed margins
X: =Parent.X + Self.Height / 4      # Quarter of own height
Y: =PrevControl.Y + PrevControl.Height / 2  # Half of previous control height
```

### 3.5 Screen-Level Properties
For screens, use these specific properties:

```yaml
Properties:
  Fill: =RGBA(248, 250, 252, 1)
  # Width and Height are automatically handled by Power Apps
```

---

## 4. CONTROL Z-INDEX & RENDERING ORDER

### 4.1 Critical Z-Index Rules
**MANDATORY**: Controls are rendered in the order they appear in YAML. Later controls appear **ON TOP** of earlier controls.

```yaml
# ‚úÖ CORRECT - Proper layering order
Children:
  # 1. BACKGROUND LAYERS (rendered first, at bottom)
  - Background:
      Control: Rectangle
      
  # 2. CONTAINER LAYERS 
  - MainContainer:
      Control: GroupContainer
      
  # 3. CONTENT LAYERS
  - ContentArea:
      Control: Rectangle
      Children:
        - TextLabel:
            Control: Label
        - InputField:
            Control: Classic/TextInput
            
  # 4. INTERACTIVE LAYERS
  - ActionButton:
      Control: Classic/Button
      
  # 5. OVERLAY LAYERS (rendered last, at top)
  - HoverOverlay:
      Control: Rectangle
  - FocusIndicator:
      Control: Rectangle
  - LoadingSpinner:
      Control: Classic/Icon

# ‚ùå WRONG - Overlay renders first, gets hidden by content
Children:
  - HoverOverlay:  # This will be BEHIND other controls
      Control: Rectangle
  - MainContent:   # This will COVER the overlay
      Control: Rectangle
```

### 4.2 Mandatory Layer Hierarchy
**CRITICAL**: Always follow this exact order for control declarations:

#### Level 1: Background & Foundation (First)
```yaml
# Background controls - rendered at bottom layer
- 'Screen.Background':
    Control: Rectangle
- 'Container.Background':
    Control: Rectangle
```

#### Level 2: Layout Containers
```yaml
# Container controls - structural layout
- 'Main.Container':
    Control: GroupContainer
- 'Content.Container':
    Control: Rectangle
```

#### Level 3: Static Content
```yaml
# Static display elements
- 'Header.Logo':
    Control: Image
- 'Title.Label':
    Control: Label
- 'Description.Text':
    Control: Label
```

#### Level 4: Interactive Content
```yaml
# Form inputs and data displays
- 'Input.Field':
    Control: Classic/TextInput
- 'Data.Gallery':
    Control: Gallery
- 'Selection.Dropdown':
    Control: Classic/DropDown
```

#### Level 5: Action Controls
```yaml
# Buttons and action triggers
- 'Submit.Button':
    Control: Classic/Button
- 'Cancel.Button':
    Control: Classic/Button
```

#### Level 6: Status & Feedback (Last)
```yaml
# Status indicators and overlays - rendered at top layer
- 'Error.Message':
    Control: Rectangle
- 'Loading.Overlay':
    Control: Rectangle
- 'Hover.Effect':
    Control: Rectangle
- 'Focus.Ring':
    Control: Rectangle
```

### 4.3 Component Internal Layering
**CRITICAL**: Within components, follow the same hierarchy:

```yaml
# ‚úÖ CORRECT - ButtonComponent internal layering
ComponentDefinitions:
  ButtonComponent:
    Children:
      # 1. Base button (background)
      - 'Button.Container':
          Control: Classic/Button
          
      # 2. Content elements
      - 'Button.Icon':
          Control: Classic/Icon
          
      # 3. Loading indicator
      - 'Button.Loading':
          Control: Classic/Icon
          
      # 4. Interactive overlays (top layer)
      - 'Button.Hover':
          Control: Rectangle
      - 'Button.Focus':
          Control: Rectangle
```

### 4.4 Gallery Template Layering
**CRITICAL**: In Gallery templates, maintain proper layering:

```yaml
# ‚úÖ CORRECT - Gallery template layering
TemplateBody:
  # 1. Background
  - 'Item.Background':
      Control: Rectangle
      
  # 2. Content
  - 'Item.Title':
      Control: Label
  - 'Item.Description':
      Control: Label
      
  # 3. Actions
  - 'Item.EditButton':
      Control: Classic/Button
      
  # 4. Status overlays
  - 'Item.StatusBadge':
      Control: Rectangle
  - 'Item.HoverHighlight':
      Control: Rectangle
```

### 4.5 Modal and Popup Layering
**CRITICAL**: For modals, overlays must be declared last:

```yaml
# ‚úÖ CORRECT - Modal layering
Children:
  # Main content first
  - 'Main.Content':
      Control: Rectangle
      
  # Modal background overlay
  - 'Modal.Background':
      Control: Rectangle
      Properties:
        Fill: =RGBA(0, 0, 0, 0.5)  # Semi-transparent
        
  # Modal content on top
  - 'Modal.Container':
      Control: Rectangle
      Properties:
        Fill: =RGBA(255, 255, 255, 1)
```

### 4.6 Z-Index Debugging
**DEBUGGING TIPS** when controls are hidden:

1. **Check Declaration Order**: Later = Higher Z-Index
2. **Verify Container Hierarchy**: Child controls inherit parent z-index context
3. **Test Visibility**: Use `Visible: =false` to temporarily hide suspected overlapping controls
4. **Check Fill Transparency**: Invisible overlays can still block clicks

```yaml
# Debugging overlapping controls
- 'Suspected.Overlay':
    Control: Rectangle
    Properties:
      Visible: =false  # Temporarily hide to test
      Fill: =RGBA(255, 0, 0, 0.3)  # Make visible with red tint
```

### 4.7 Interactive Control Protection
**MANDATORY**: Ensure interactive controls are not covered:

```yaml
# ‚úÖ CORRECT - Button not covered by overlay
Children:
  - 'Content.Background':
      Control: Rectangle
  - 'Action.Button':
      Control: Classic/Button  # Interactive element
  - 'Decorative.Overlay':
      Control: Rectangle
      Properties:
        Fill: =RGBA(0, 0, 0, 0)  # Transparent, won't block clicks

# ‚ùå WRONG - Button covered by solid overlay
Children:
  - 'Action.Button':
      Control: Classic/Button
  - 'Blocking.Overlay':      # This will cover the button!
      Control: Rectangle
      Properties:
        Fill: =RGBA(255, 255, 255, 0.8)  # Semi-solid, blocks interaction
```

### 4.8 Layer Priority by Control Type
**REFERENCE**: Default z-index priority by control type:

#### **Lowest Priority (Declare First)**:
- Rectangle (backgrounds)
- GroupContainer (layout)
- Image (decorative)

#### **Medium Priority**:
- Label (text content)
- Gallery (data display)
- Form (structured input)

#### **High Priority**:
- Classic/Button (actions)
- Classic/TextInput (inputs)
- Classic/DropDown (selections)

#### **Highest Priority (Declare Last)**:
- Classic/Icon (status indicators)
- Rectangle (overlays, modals)
- Error/Loading states

---

## 5. ALLOWED CONTROLS

### 5.1 Input Controls
```yaml
# Text Input
Control: Classic/TextInput

# Buttons  
Control: Classic/Button

# Date Selection
Control: Classic/DatePicker

# Dropdowns
Control: Classic/DropDown
Control: Classic/ComboBox

# Selection Controls
Control: Classic/CheckBox
Control: Classic/Radio
Control: Classic/Toggle
Control: Classic/Slider
Control: Rating
Control: PenInput
```

### 5.2 Display Controls
```yaml
# Text Display
Control: Label

# Media Display
Control: Image
Control: HtmlViewer
Control: RichTextEditor
Control: PDFViewer

# Icons
Control: Classic/Icon
```

### 5.3 Layout Controls
```yaml
# Containers
Control: GroupContainer
Control: Rectangle

# Data Display
Control: Gallery
Control: Form
Control: FormViewer
Control: DataTable
```

### 5.4 Component Controls
```yaml
# Canvas Components
Control: CanvasComponent
ComponentName: ComponentName
```

### 5.5 Shape Controls
```yaml
Control: Circle
Control: Triangle
Control: Pentagon
Control: Octagon
Control: Star
Control: Arrow
Control: PartialCircle
```

### 5.6 Chart Controls
```yaml
Control: BarChart
Control: LineChart
Control: PieChart
Control: Legend
```

### 5.7 Media & Data Controls
```yaml
# Media
Control: AddMedia
Control: Timer

# Data
Control: Import
Control: Export
Control: ListBox
Control: PowerBI
```

---

## 6. PROPERTIES GUIDELINES

### 6.1 Color Properties
**ALWAYS** use RGBA format:

```yaml
Fill: =RGBA(255, 255, 255, 1)
Color: =RGBA(32, 54, 71, 1)
BorderColor: =RGBA(230, 230, 230, 1)
```

### 6.2 DropShadow Properties
**ONLY** use these values:
```yaml
DropShadow: =DropShadow.Light
DropShadow: =DropShadow.Regular
DropShadow: =DropShadow.Bold
DropShadow: =DropShadow.ExtraBold
DropShadow: =DropShadow.Semilight
DropShadow: =DropShadow.None
```

### 6.3 Font Properties
```yaml
FontWeight: =FontWeight.Bold
FontWeight: =FontWeight.Semibold
FontWeight: =FontWeight.Normal
Font: =Font.'Open Sans'
```

### 6.4 Formula Properties
**ALL** dynamic properties MUST start with `=`:

```yaml
# ‚úÖ CORRECT
Visible: =varShowControl
Text: =Concatenate("Hello ", varUserName)
Fill: =If(Self.IsHovered, RGBA(0, 120, 212, 1), RGBA(255, 255, 255, 1))

# ‚ùå WRONG
Visible: varShowControl
Text: "Static text" # Use this only for truly static text
```

### 6.5 Icon Properties
**ONLY** use valid icon references:

```yaml
# ‚úÖ CORRECT - Valid Icons
Icon: =Icon.CalendarBlank
Icon: =Icon.CheckBadge
Icon: =Icon.Clock
Icon: =Icon.Cancel

# ‚ùå WRONG - Invalid Icons
Icon: =Icon.Calendar  # Does not exist
```

### 6.6 Text Formatting
**PROPER** text concatenation formatting:

```yaml
# ‚úÖ CORRECT - Proper spacing
Text: ="Email:" & " " & ThisItem.Email
Text: ="Status:" & " " & ThisItem.Status

# ‚ùå WRONG - Space inside quotes
Text: ="Email: " & ThisItem.Email
Text: ="Status: " & ThisItem.Status
```

### 6.7 Variants for Controls
```yaml
# GroupContainer
Variant: ManualLayout
Variant: AutoLayout

# Gallery
Variant: Vertical
Variant: Horizontal
Variant: VariableHeight

# Form
Variant: Classic

# Arrow
Variant: BackArrow

# Star
Variant: 5Points
Variant: 6Points
Variant: 8Points
Variant: 12Points
```

---

## 7. ICON GUIDELINES

### 7.1 Allowed Icons
**CRITICAL**: Icons can ONLY be used from this approved list. Using any icon not in this list will cause errors.

**ALLOWED ICONS:**
```yaml
Add, AddDocument, AddLibrary, AddToCalendar, AddUser, Airplane, Alarm, ArrowDown, ArrowLeft, ArrowRight, ArrowUp, BackArrow, Bell, Blocked, Bookmark, BookmarkFilled, Bug, Bus, Calculator, CalendarBlank, Camera, CameraAperture, Cancel, CancelBadge, Cars, Check, CheckBadge, ChevronDown, ChevronLeft, ChevronRight, ChevronUp, ClearDrawing, Clock, CollapseView, ColorPicker, Compose, ComputerDesktop, Controller, Copy, Crop, Currency, Cut, Database, DetailList, Devices, Diamond, DockCheckProperties, DockLeft, DockRight, Document, DocumentPDF, DocumentWithContent, Download, Draw, Edit, EmojiFrown, EmojiHappy, EmojiNeutral, EmojiSad, EmojiSmile, Enhance, Erase, Error, ExpandView, Export, Filter, FilterFlat, FilterFlatFilled, Flag, Folder, ForkKnife, Globe, GlobeChangesPending, GlobeError, GlobeNotConnected, GlobeRefresh, GlobeWarning, HalfFilledCircle, Hamburger, Health, Heart, Help, Hide, History, Home, HorizontalLine, Hospital, Import, Information, Items, Journal, Key, Laptop, Leave, LevelsLayersItems, Lightbulb, LightningBolt, LikeDislike, LineWeight, Link, ListScrollEmpty, ListScrollWatchlist, ListWatchlistRemind, Location, Lock, LogJournal, Mail, Manufacture, Medical, Message, Microphone, Mobile, Money, More, Newspaper, NextArrow, Note, Notebook, OpenInNewWindow, OptionsList, PaperClip, Paste, People, Person, Phone, Phonebook, Pictures, Pin, Post, Print, Printing3D, Publish, QuestionMark, RadarActivityMonitor, Redo, Reload, Save, Scan, Search, Send, Settings, Share, Shirt, Shop, ShoppingCart, Show, ShowDrawing, SignOut, Site, SkipBack, SkipForward, SkipNext, SkipPrevious, Slider, Sort, Speed, Split, SplitHorizontal, SplitVertical, Star, StarFilled, Stop, Strikethrough, Subtract, Support, Sync, Tablet, Tag, Text, ThumbsDown, ThumbsDownFilled, ThumbsUp, ThumbsUpFilled, Tools, Train, Transportation, Trash, Tray, Trending, TrendingHashtag, TrendingUpwards, Undo, Unlock, VerticalLine, Video, View, Waffle, Warning, Waypoint, Weather, ZoomIn, ZoomOut
```

### 7.2 Icon Usage Examples
```yaml
# ‚úÖ CORRECT - Using allowed icons
Icon: =Icon.CalendarBlank
Icon: =Icon.Person
Icon: =Icon.Settings
Icon: =Icon.Search
Icon: =Icon.Add

# ‚ùå WRONG - Using non-allowed icons
Icon: =Icon.CustomIcon      # Not in allowed list
Icon: =Icon.MyIcon         # Not in allowed list
Icon: =Icon.SpecialIcon    # Not in allowed list
```

**IMPORTANT**: Even if an icon is in the approved list, always test it in Power Apps Studio as some icons may not be recognized in certain contexts. If you get "Name isn't valid" errors, replace with a similar functional icon from the approved list.

### 7.3 Icon Mapping for Common Use Cases
```yaml
# User/Profile related
"User" ‚Üí Icon.Person
"Profile" ‚Üí Icon.Person
"Account" ‚Üí Icon.Person

# Calendar/Date related
"Calendar" ‚Üí Icon.CalendarBlank
"Date" ‚Üí Icon.CalendarBlank
"Schedule" ‚Üí Icon.CalendarBlank

# Communication
"Email" ‚Üí Icon.Mail
"Message" ‚Üí Icon.Message
"Call" ‚Üí Icon.Phone

# Actions
"Add" ‚Üí Icon.Add
"Edit" ‚Üí Icon.Edit
"Delete" ‚Üí Icon.Cancel
"Save" ‚Üí Icon.Save
"Search" ‚Üí Icon.Search

# Navigation
"Back" ‚Üí Icon.BackArrow
"Next" ‚Üí Icon.NextArrow
"Up" ‚Üí Icon.ChevronUp
"Down" ‚Üí Icon.ChevronDown
"Left" ‚Üí Icon.ChevronLeft
"Right" ‚Üí Icon.ChevronRight

# Status
"Success" ‚Üí Icon.CheckBadge
"Error" ‚Üí Icon.Error
"Warning" ‚Üí Icon.Warning
"Info" ‚Üí Icon.Information
```

---

## 8. NAMING CONVENTIONS

### 8.1 Special Character Handling
**REQUIRED**: Wrap names with special characters in single quotes:

```yaml
# ‚úÖ CORRECT - Names with special characters
- 'Header.Logo':
- 'Login Container':
- 'User-Info':
- 'Data View 1':
- 'My.Control.Name':

# ‚úÖ CORRECT - Simple names (no quotes needed)
- HeaderLogo:
- LoginContainer:
- UserInfo:
```

### 8.2 Naming Best Practices
```yaml
# Use descriptive, hierarchical names
- 'Header.UserInfo.Avatar':
- 'LoginForm.UsernameInput':
- 'Dashboard.StatsCard.Title':
- 'Navigation.MenuButton':
```

---

## 9. COMMON MISTAKES TO AVOID

### 9.1 Component Definition Structure Errors
**CRITICAL**: Use the correct component structure:

```yaml
# ‚ùå WRONG - Old/Invalid Structure
ComponentDefinition:
  DefinitionType: CanvasComponent
  CustomProperties:
    - UserRole:
        PropertyType: Data
        PropertyDataType: Text
        DefaultValue: ="Employee"

# ‚úÖ CORRECT - New/Valid Structure
ComponentDefinitions:
  NavigationComponent:
    DefinitionType: CanvasComponent
    CustomProperties:
      UserRole:
        PropertyKind: Input
        DisplayName: UserRole
        Description: "Vai tr√≤ c·ªßa ng∆∞·ªùi d√πng"
        DataType: Text
        Default: ="Employee"
    Properties:
      Height: =App.Height
      Width: =App.Width
```

### 9.2 Component Control Declaration Errors
**CRITICAL**: Use correct component control syntax:

```yaml
# ‚ùå WRONG - Direct Component Reference
Control: HeaderComponent
Control: NavigationComponent
Control: StatsCardComponent

# ‚úÖ CORRECT - Proper Component Usage
Control: CanvasComponent
ComponentName: HeaderComponent

Control: CanvasComponent
ComponentName: NavigationComponent

Control: CanvasComponent
ComponentName: StatsCardComponent
```

### 9.3 Custom Properties Errors
**NEVER USE** these old property names:
- `PropertyType` ‚Üí Use `PropertyKind`
- `PropertyDataType` ‚Üí Use `DataType`
- `DefaultValue` ‚Üí Use `Default`

**ALWAYS INCLUDE** these required fields:
- `DisplayName` - Human readable name
- `Description` - Property description
- `DataType` - Data type
- `Default` - Default value

### 9.4 Event Property Errors
**WRONG** event structure:
```yaml
# ‚ùå WRONG
- OnNavigate:
    PropertyType: Event
    PropertyDataType: Text
    DefaultValue: =""
```

**CORRECT** event structure:
```yaml
# ‚úÖ CORRECT
OnNavigate:
  PropertyKind: Event
  DisplayName: OnNavigate
  Description: "S·ª± ki·ªán khi chuy·ªÉn m√†n h√¨nh"
  ReturnType: None
  Default: =
  Parameters:
    - ScreenName:
        Description: "T√™n m√†n h√¨nh"
        DataType: Text
        IsOptional: true
        Default: ="Dashboard"
```

### 9.5 Event Call Syntax Errors
**WRONG** event call syntax:
```yaml
# ‚ùå WRONG
OnSelect: =NavigationComponent.OnNavigate; Set(varActiveScreen, "Dashboard")
```

**CORRECT** event call syntax:
```yaml
# ‚úÖ CORRECT
OnSelect: =NavigationComponent.OnNavigate(); Set(varActiveScreen, "Dashboard")
```

### 9.6 Text Property Formatting
**AVOID** spaces after colons in text content:

```yaml
# ‚úÖ CORRECT
Text: ="Demo:" & " " & "Ph·∫ßn l·ªõn c·ªßa ·ª©ng d·ª•ng"
Text: ="Email:" & " " & ThisItem.Email

# ‚ùå WRONG  
Text: ="Demo: Ph·∫ßn l·ªõn c·ªßa ·ª©ng d·ª•ng"
Text: ="Email: " & ThisItem.Email
```

### 9.7 Absolute Positioning
**NEVER** use absolute values for positioning:

```yaml
# ‚ùå WRONG
X: 100
Y: 200
Width: 300
Height: 150

# ‚úÖ CORRECT
X: =Parent.X + 20
Y: =PreviousControl.Y + PreviousControl.Height + 10
Width: =Parent.Width - 40
Height: =Parent.Height / 4
```

### 9.8 Fixed Numbers in Calculations
**CRITICAL**: Avoid excessive use of fixed numbers in positioning/sizing calculations:

```yaml
# ‚ùå DISCOURAGED - Too many fixed numbers
X: =Parent.X + 20
Y: =HeaderControl.Y + 50
Width: =Parent.Width - 40
Height: =Parent.Height / 2 - 30
Size: =16

# ‚úÖ PREFERRED - Relative calculations
X: =Parent.X + Parent.Width * 0.02
Y: =HeaderControl.Y + HeaderControl.Height * 1.5
Width: =Parent.Width * 0.95
Height: =Parent.Height / 2 - HeaderControl.Height / 3
Size: =Parent.Width / 50

# ‚úÖ ACCEPTABLE - Small fixed adjustments
X: =Parent.X + 5        # Small spacing
Width: =Parent.Width - 10   # Standard margin
Size: =14               # Standard font size
```

**RULES for Fixed Numbers**:
- **AVOID**: Large fixed numbers (> 20 pixels)
- **MINIMIZE**: Small fixed numbers (< 10 pixels)
- **PREFER**: Percentage-based calculations
- **USE**: Relative calculations with other control properties

### 9.9 Missing Required Properties
**ALWAYS** include these for positioned controls:

```yaml
Properties:
  X: =Parent.X + 20
  Y: =Parent.Y + 10
  Width: =Parent.Width - 40
  Height: =40
  # Other properties...
```

### 9.10 Missing Component-Level Properties
**ALWAYS** include these for components:

```yaml
ComponentDefinitions:
  ComponentName:
    DefinitionType: CanvasComponent
    CustomProperties:
      # Custom properties here
    Properties:
      Height: =App.Height
      Width: =App.Width
    Children:
      # Child controls here
```

### 9.11 YAML Syntax for Multi-line Formulas
**CRITICAL**: Use correct YAML syntax for formulas based on length:

#### For Short Formulas (‚â§120 characters):
```yaml
# ‚úÖ CORRECT - Single line formula
OnSelect: =Set(varExample, true); Navigate(NextScreen)
Text: =Concatenate("Hello ", varUserName)
```

#### For Long Formulas (>120 characters):
```yaml
# ‚úÖ CORRECT - Multi-line formula with pipe operator
OnVisible: |
  =Set(varActiveScreen, "Dashboard"); Set(varDemoStats, {TotalLeave: 12, UsedLeave: 3, RemainingLeave: 9}); Set(varRecentRequests, Table({ID: "LR001", Date: "2024-01-15", Days: 3, Status: "Approved"}))

OnSelect: |
  =Set(varIsLoading, true); Set(varLoginError, ""); If(And(Not(IsBlank('Login.Email.Input'.Text)), Not(IsBlank('Login.Password.Input'.Text))), Set(varCurrentUser, {ID: "EMP001", FullName: "Nguy·ªÖn VƒÉn An", Email: 'Login.Email.Input'.Text, Role: "Employee", Department: "Ph√≤ng C√¥ng ngh·ªá th√¥ng tin"}); Set(varIsLoading, false); Navigate(DashboardScreen), Set(varLoginError, "Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng"); Set(varIsLoading, false))
```

**RULES for Formula Length:**
- **‚â§120 characters:** Use single line format
- **>120 characters:** Use pipe operator (`|`) for multi-line format
- **ALWAYS** place the pipe operator (`|`) immediately after the property name and colon
- **ALWAYS** indent the formula content with proper spacing (typically 2 spaces)
- **ESPECIALLY** use for `OnSelect`, `OnChange`, `OnVisible` with complex logic

### 9.12 Control Reference Errors
**CRITICAL**: Use single quotes for control names with dots:

```yaml
# ‚ùå WRONG - Dot operator error
Text: =LoginCard.FormSection.UsernameInput.Text

# ‚úÖ CORRECT - Wrap in single quotes
Text: ='LoginCard.FormSection.UsernameInput'.Text
```

### 9.13 Invalid Self Properties
**NEVER USE** these invalid Self properties:

```yaml
# ‚ùå WRONG - Invalid Self properties
BorderColor: =If(Self.Focused, RGBA(0, 120, 212, 1), RGBA(200, 200, 200, 1))
Fill: =If(Self.IsHovered, RGBA(240, 240, 240, 1), RGBA(255, 255, 255, 1))

# ‚úÖ CORRECT - Use valid properties or events
BorderColor: =If(Self.Focus, RGBA(0, 120, 212, 1), RGBA(200, 200, 200, 1))
# Use OnHover events instead of Self.IsHovered
```

### 9.14 Button Property Errors
**NEVER USE** these properties for Classic/Button:

```yaml
# ‚ùå WRONG - Invalid button properties
Properties:
  BorderRadius: =8        # Not supported for Classic/Button
  Disabled: =true         # Use DisplayMode instead
  Align: =Align.Center    # Not supported for buttons

# ‚úÖ CORRECT - Valid button properties
Properties:
  DisplayMode: =If(varIsDisabled, DisplayMode.Disabled, DisplayMode.Edit)
  # BorderRadius not available for Classic/Button
  # Use Fill and other styling properties instead
```

### 9.15 Rectangle Radius Errors
**NEVER USE** individual corner radius properties for Rectangle:

```yaml
# ‚ùå WRONG - Individual corner radius not supported
Properties:
  RadiusBottomLeft: =8
  RadiusBottomRight: =8
  RadiusTopLeft: =8
  RadiusTopRight: =8

# ‚úÖ CORRECT - Use uniform BorderRadius
Properties:
  BorderRadius: =8
```

### 9.16 Invalid Icon References
**NEVER USE** non-existent icons:

```yaml
# ‚ùå WRONG - Non-existent icons
Icon: =Icon.Calendar        # Should be Icon.CalendarBlank
Icon: =Icon.BarChart        # Should be Icon.BarChart4
Icon: =Icon.Document        # Should be Icon.DocumentText
Icon: =Icon.CustomIcon      # Not in Power Apps
Icon: =Icon.MyIcon         # Not in Power Apps

# ‚úÖ CORRECT - Valid icon references
Icon: =Icon.CalendarBlank
Icon: =Icon.BarChart4
Icon: =Icon.DocumentText
Icon: =Icon.Person
Icon: =Icon.Settings
```

### 9.17 Invalid Icon Usage from Approved List
**CRITICAL**: Only use icons from the approved list in section 6.1:

```yaml
# ‚ùå WRONG - Using non-approved icons (even if they exist in Power Apps)
Icon: =Icon.CustomIcon
Icon: =Icon.MySpecialIcon
Icon: =Icon.UndefinedIcon
Icon: =Icon.RandomIcon

# ‚úÖ CORRECT - Using approved icons only
Icon: =Icon.CalendarBlank
Icon: =Icon.Person
Icon: =Icon.Settings
Icon: =Icon.Search
```

### 9.18 Text Function with RGBA Values
**CRITICAL**: Never use Text() function with RGBA values:

```yaml
# ‚ùå WRONG - Text() cannot convert RGBA values
Text: =Concatenate("Color: ", Text(RGBA(255, 0, 0, 1)))
Text: =Text(RGBA(59, 130, 246, 1))

# ‚úÖ CORRECT - Use string literals for RGBA in text
Text: =Concatenate("Color: RGBA(255, 0, 0, 1)")
Text: ="Primary: RGBA(59, 130, 246, 1)"
```

### 9.19 Invalid Focus Properties for TextInput
**CRITICAL**: Use correct focus properties for Classic/TextInput:

```yaml
# ‚ùå WRONG - .Focus does not exist for Classic/TextInput
Visible: ='MyTextInput'.Focus
BorderColor: =If('MyTextInput'.Focus, RGBA(0, 120, 212, 1), RGBA(200, 200, 200, 1))

# ‚úÖ CORRECT - Use .Focused for Classic/TextInput
Visible: ='MyTextInput'.Focused
BorderColor: =If('MyTextInput'.Focused, RGBA(0, 120, 212, 1), RGBA(200, 200, 200, 1))
```

### 9.20 Classic/TextInput Property Errors
**CRITICAL**: Use correct property names for Classic/TextInput:

```yaml
# ‚ùå WRONG - TextMode property does not exist for Classic/TextInput
Properties:
  TextMode: =TextMode.Password
  TextMode: =TextMode.MultiLine

# ‚úÖ CORRECT - Use Mode property for Classic/TextInput
Properties:
  Mode: =TextMode.Password
  Mode: =TextMode.MultiLine
```

**RULES for Classic/TextInput Properties:**
- **NEVER USE**: `TextMode:` property
- **ALWAYS USE**: `Mode:` property for text input modes
- **VALID VALUES**: `TextMode.Password`, `TextMode.MultiLine`, `TextMode.SingleLine`

### 9.8 Gallery Property Errors
**CRITICAL**: Gallery Variant-specific property restrictions:

```yaml
# ‚ùå WRONG - VariableHeight kh√¥ng h·ªó tr·ª£ WrapCount
- 'MyGallery':
    Control: Gallery
    Variant: VariableHeight
    Properties:
      WrapCount: =7  # Kh√¥ng h·ªó tr·ª£ cho VariableHeight

# ‚úÖ CORRECT - Ch·ªâ s·ª≠ d·ª•ng WrapCount v·ªõi Horizontal/Vertical variants
- 'MyGallery':
    Control: Gallery
    Variant: Horizontal
    Properties:
      WrapCount: =7  # H·ªó tr·ª£ cho Horizontal/Vertical variants
```

**RULES for Gallery Properties:**
- **VariableHeight variant**: KH√îNG h·ªó tr·ª£ `WrapCount` property
- **WrapCount**: Ch·ªâ s·ª≠ d·ª•ng v·ªõi Horizontal/Vertical variants
- **TemplateSize**: B·∫Øt bu·ªôc cho t·∫•t c·∫£ Gallery variants

### 9.19 Rectangle Variant Property
**Error**: `Unknown property 'Variant' for control type 'Rectangle'`

```yaml
# ‚ùå WRONG - Rectangle kh√¥ng h·ªó tr·ª£ Variant property
- 'MyRectangle':
    Control: Rectangle
    Variant: ManualLayout  # PA2108 Error
    Properties:
      OnSelect: =Navigate(NextScreen)

# ‚úÖ CORRECT - Rectangle kh√¥ng c√≥ Variant
- 'MyRectangle':
    Control: Rectangle
    Properties:
      OnSelect: =Navigate(NextScreen)
```

### 9.20 Rectangle DropShadow Property
**Error**: `Unknown property 'DropShadow' for control type 'Rectangle'`

```yaml
# ‚ùå WRONG - Rectangle kh√¥ng h·ªó tr·ª£ DropShadow property
- 'MyRectangle':
    Control: Rectangle
    Properties:
      DropShadow: =DropShadow.Light  # PA2108 Error
      Fill: =RGBA(255, 255, 255, 1)

# ‚úÖ CORRECT - Rectangle kh√¥ng c√≥ DropShadow
- 'MyRectangle':
    Control: Rectangle
    Properties:
      Fill: =RGBA(255, 255, 255, 1)
      BorderColor: =RGBA(230, 230, 230, 1)
      # Use BorderThickness for visual effects instead
```

### 9.21 Rectangle BorderRadius Property
**Error**: `Unknown property 'BorderRadius' for control type 'Rectangle'`

```yaml
# ‚ùå WRONG - Rectangle kh√¥ng h·ªó tr·ª£ BorderRadius property
- 'MyRectangle':
    Control: Rectangle
    Properties:
      BorderRadius: =8  # PA2108 Error
      Fill: =RGBA(255, 255, 255, 1)

# ‚úÖ CORRECT - Rectangle kh√¥ng c√≥ BorderRadius
- 'MyRectangle':
    Control: Rectangle
    Properties:
      Fill: =RGBA(255, 255, 255, 1)
      BorderColor: =RGBA(230, 230, 230, 1)
      BorderThickness: =2
      # Use other controls for rounded corners if needed
```

---

## üö® PA2108 ERROR FIXES

### Common PA2108 Errors and Solutions

#### GroupContainer with Event Properties
**Error**: `Unknown property 'OnSelect' for control type 'GroupContainer'`

```yaml
# ‚ùå WRONG - GroupContainer kh√¥ng h·ªó tr·ª£ event properties
- 'MyContainer':
    Control: GroupContainer
    Variant: ManualLayout
    Properties:
      OnSelect: =Navigate(NextScreen)  # PA2108 Error

# ‚úÖ CORRECT - D√πng Rectangle thay th·∫ø
- 'MyContainer':
    Control: Rectangle
    Properties:
      OnSelect: =Navigate(NextScreen)  # Rectangle h·ªó tr·ª£ OnSelect
```

#### Gallery VariableHeight with WrapCount
**Error**: `Unknown property 'WrapCount' for control type 'Gallery' and variant 'VariableHeight'`

```yaml
# ‚ùå WRONG - VariableHeight kh√¥ng h·ªó tr·ª£ WrapCount
- 'MyGallery':
    Control: Gallery
    Variant: VariableHeight
    Properties:
      WrapCount: =7  # PA2108 Error

# ‚úÖ CORRECT - X√≥a WrapCount cho VariableHeight
- 'MyGallery':
    Control: Gallery
    Variant: VariableHeight
    Properties:
      # WrapCount kh√¥ng c·∫ßn cho VariableHeight
      Items: =MyCollection
```

#### Classic/Button Invalid Properties
**Error**: `Unknown property 'BorderRadius' for control type 'Classic/Button'`

```yaml
# ‚ùå WRONG - Classic/Button kh√¥ng h·ªó tr·ª£ m·ªôt s·ªë properties
- 'MyButton':
    Control: Classic/Button
    Properties:
      BorderRadius: =8     # PA2108 Error
      Disabled: =true      # PA2108 Error
      Align: =Align.Center # PA2108 Error

# ‚úÖ CORRECT - S·ª≠ d·ª•ng properties h·ªó tr·ª£
- 'MyButton':
    Control: Classic/Button
    Properties:
      DisplayMode: =If(varIsDisabled, DisplayMode.Disabled, DisplayMode.Edit)
      # BorderRadius kh√¥ng c√≥ cho Classic/Button
```

#### Rectangle Individual Corner Radius
**Error**: `Unknown property 'RadiusTopLeft' for control type 'Rectangle'`

```yaml
# ‚ùå WRONG - Rectangle kh√¥ng h·ªó tr·ª£ individual corner radius
- 'MyRectangle':
    Control: Rectangle
    Properties:
      RadiusTopLeft: =8      # PA2108 Error
      RadiusTopRight: =8     # PA2108 Error
      RadiusBottomLeft: =8   # PA2108 Error
      RadiusBottomRight: =8  # PA2108 Error

# ‚úÖ CORRECT - D√πng BorderRadius uniform
- 'MyRectangle':
    Control: Rectangle
    Properties:
      BorderRadius: =8  # Uniform radius cho t·∫•t c·∫£ g√≥c
```

#### Classic/TextInput Invalid Properties
**Error**: `Unknown property 'OnFocus' for control type 'Classic/TextInput'`

```yaml
# ‚ùå WRONG - Classic/TextInput kh√¥ng h·ªó tr·ª£
- 'MyTextInput':
    Control: Classic/TextInput
    Properties:
      OnFocus: =Set(varFocused, true)   # PA2108 Error
      OnBlur: =Set(varFocused, false)   # PA2108 Error
      TextMode: =TextMode.Password      # PA2108 Error

# ‚úÖ CORRECT - D√πng properties h·ªó tr·ª£
- 'MyTextInput':
    Control: Classic/TextInput
    Properties:
      Mode: =TextMode.Password  # D√πng Mode thay TextMode
      # OnFocus/OnBlur kh√¥ng c√≥ cho Classic/TextInput
```

### PA2108 Quick Reference Table

| Control Type | Forbidden Properties | Replacement | Note |
|--------------|---------------------|-------------|------|
| **GroupContainer** | OnSelect, OnClick, OnHover, OnChange | Use Rectangle | Rectangle h·ªó tr·ª£ events |
| **Gallery VariableHeight** | WrapCount | Remove property | Ch·ªâ Horizontal/Vertical h·ªó tr·ª£ |
| **Classic/Button** | BorderRadius, Disabled, Align | DisplayMode for Disabled | Use modern styling alternatives |
| **Rectangle** | RadiusTopLeft, etc., Variant, DropShadow, BorderRadius | BorderThickness, BorderColor | No radius or shadow support |
| **Classic/TextInput** | OnFocus, OnBlur, TextMode | Mode for TextMode | Limited event support |

### Automation Scripts Available

- `scripts/fix_pa2108_properties.py` - Auto-fix PA2108 errors
- `scripts/fix_pa2108.bat` - Windows batch runner
- `scripts/fix_groupcontainer_onselect.py` - Specific GroupContainer fixes

---

## 10. BEST PRACTICES

### 10.1 Component Structure Best Practices
- Always use `ComponentDefinitions` (plural) as root
- Include component name as child of `ComponentDefinitions`
- Always include `Properties` section with `Height` and `Width`
- Use descriptive `DisplayName` and `Description` for all custom properties
- Group related custom properties logically

### 10.2 Component Control Declaration Best Practices
- Always use `Control: CanvasComponent` for component references
- Always include `ComponentName: ComponentName` property
- Never use direct component references like `Control: HeaderComponent`
- Maintain consistent indentation for component properties

### 10.3 Custom Properties Best Practices
- Use `Input` for most custom properties
- Use `Event` for callback functions
- Use `Output` for computed values
- Always provide meaningful default values
- Include parameter definitions for event properties

### 10.4 Event Handling Best Practices
- Always call event properties with parentheses: `ComponentName.EventName()`
- Define parameters for events when needed
- Use `ReturnType: None` for most events
- Mark optional parameters with `IsOptional: true`

### 10.5 Multi-line Formula Best Practices
- Use pipe operator (`|`) for formulas longer than 120 characters
- Maintain consistent indentation (2 spaces recommended)
- Keep the entire formula logic on the indented line after the pipe
- Use for complex `OnSelect`, `OnChange`, `OnVisible` properties
- Apply to both OnVisible and OnSelect formulas consistently

### 10.6 Text Formatting Best Practices
- Always separate colon and space in text concatenation
- Use `"Label:" & " " & Value` instead of `"Label: " & Value`
- Maintain consistency across all text properties
- Avoid spaces after colons in quoted strings

### 10.7 Icon Reference Best Practices
- Always verify icon names exist in Power Apps
- Use `Icon.CalendarBlank` instead of `Icon.Calendar`
- Use `Icon.CheckBadge` for checkmarks
- Use `Icon.Cancel` for cancel/close actions
- Test icon references in Power Apps Studio

### 10.8 Consistency
- Use consistent naming patterns across similar controls
- Apply consistent spacing and sizing formulas
- Use consistent color schemes (RGBA values)
- Maintain consistent component declaration patterns

### 10.9 Relative References
**ALWAYS** use relative references:
```yaml
# Parent references
Width: =Parent.Width - 80
X: =Parent.X + 20

# Self references  
Height: =Self.Size * 1.2

# Other control references
Y: =HeaderControl.Y + HeaderControl.Height + 10
```

### 10.10 Relative Calculations Best Practices
**CRITICAL**: Minimize fixed numbers in favor of relative calculations:

```yaml
# ‚úÖ EXCELLENT - Fully relative
X: =Parent.X + Parent.Width * 0.05
Y: =HeaderControl.Y + HeaderControl.Height * 1.2
Width: =Parent.Width * 0.9
Height: =Parent.Height / 3 - SidePanel.Height / 4

# ‚úÖ GOOD - Mostly relative with minimal fixed numbers
X: =Parent.X + 5
Y: =HeaderControl.Y + HeaderControl.Height + 2
Width: =Parent.Width - 10
Height: =Parent.Height / 3

# ‚ö†Ô∏è ACCEPTABLE - Some fixed numbers for standard spacing
X: =Parent.X + 20
Width: =Parent.Width - 40
Size: =14

# ‚ùå POOR - Too many fixed numbers
X: =Parent.X + 50
Y: =100
Width: =Parent.Width - 80
Height: =200
```

**CALCULATION PREFERENCES** (in order):
1. **Percentage/Ratio calculations**: `Width: =Parent.Width * 0.8`
2. **Relative to other controls**: `Y: =Control1.Y + Control1.Height`
3. **Mathematical relationships**: `Height: =Self.Width / 2`
4. **Small fixed adjustments**: `X: =Parent.X + 5`
5. **Standard fixed values**: `Size: =14` (fonts, borders)

### 10.11 Hierarchy Maintenance
- Maintain clear parent-child relationships
- Use logical grouping with GroupContainer
- Keep related controls together in the YAML structure

### 10.12 Property Organization
Organize properties in this order:
1. Position (X, Y)
2. Size (Width, Height)  
3. Visual (Fill, Color, BorderColor)
4. Behavior (OnSelect, OnChange)
5. Content (Text, Items)
6. Other properties

```yaml
Properties:
  X: =Parent.X + 20
  Y: =Parent.Y + 10
  Width: =Parent.Width - 40
  Height: =40
  Fill: =RGBA(255, 255, 255, 1)
  Color: =RGBA(32, 54, 71, 1)
  BorderColor: =RGBA(230, 230, 230, 1)
  OnSelect: =Navigate(NextScreen)
  Text: ="Click me"
  FontWeight: =FontWeight.Semibold
```

### 10.13 Component Sizing Best Practices
**CRITICAL**: Component initialization must use proportional sizing relative to App dimensions.

```yaml
# ‚ùå WRONG - Full App dimensions (kh√¥ng ph√π h·ª£p cho most components)
ComponentDefinitions:
  NavigationComponent:
    Properties:
      Height: =App.Height  # Takes full height - wrong for navigation
      Width: =App.Width   # Takes full width - wrong for side navigation

# ‚úÖ CORRECT - Proportional sizing ph√π h·ª£p v·ªõi component purpose
ComponentDefinitions:
  NavigationComponent:
    Properties:
      Height: =App.Height           # Full height OK for navigation
      Width: =App.Width * 0.2       # 20% width cho side navigation
      
  HeaderComponent:
    Properties:
      Height: =App.Height * 0.08    # 8% height cho header
      Width: =App.Width             # Full width OK for header
      
  ButtonComponent:
    Properties:
      Height: =App.Height * 0.06    # 6% height cho button
      Width: =App.Width * 0.15      # 15% width cho button
      
  CardComponent:
    Properties:
      Height: =App.Height * 0.3     # 30% height cho card
      Width: =App.Width * 0.45      # 45% width cho card
```

**COMPONENT SIZING GUIDELINES:**
- **NavigationComponent**: Width = App.Width * 0.15-0.25 (side nav), App.Width (top nav)
- **HeaderComponent**: Height = App.Height * 0.06-0.1, Width = App.Width
- **ButtonComponent**: Height = App.Height * 0.045-0.065, Width = App.Width * 0.12-0.2
- **CardComponent**: Height = App.Height * 0.25-0.4, Width = App.Width * 0.3-0.5
- **InputComponent**: Height = App.Height * 0.05-0.07, Width = App.Width * 0.2-0.8
- **StatsCardComponent**: Height = App.Height * 0.15-0.25, Width = App.Width * 0.2-0.3

### 10.14 Component Parent-Fitting Rules
**CRITICAL**: Components must adapt to their parent container context, not always use App dimensions.

```yaml
# ‚ùå WRONG - Component always uses App reference
ComponentDefinitions:
  ButtonComponent:
    Properties:
      Height: =App.Height * 0.06    # Ignores parent context
      Width: =App.Width * 0.15      # May not fit parent layout
    Children:
      - Button.Container:
          Width: =Self.Width          # Fixed to component size
          Height: =Self.Height        # No flexibility

# ‚úÖ CORRECT - Component adapts to parent AND provides sensible defaults
ComponentDefinitions:
  ButtonComponent:
    Properties:
      Height: =App.Height * 0.06     # Default sizing for app-level usage
      Width: =App.Width * 0.15       # Default sizing for app-level usage
    Children:
      - Button.Container:
          Width: =If(Parent.Width > 0,
            Min(Parent.Width, Max(Parent.Width * 0.8, 120)),  # Adapt to parent
            Self.Width)  # Fallback to component default
          Height: =If(Parent.Height > 0,
            Min(Parent.Height, Max(Parent.Height * 0.8, 40)), # Adapt to parent
            Self.Height) # Fallback to component default
```

**PARENT-FITTING PRINCIPLES:**
1. **Responsive Width**: `Width: =Min(Parent.Width * 0.9, MaxWidth)`
2. **Responsive Height**: `Height: =Min(Parent.Height * 0.8, MaxHeight)`
3. **Minimum Constraints**: Always set minimum usable sizes
4. **Maximum Constraints**: Prevent components from becoming too large
5. **Context Awareness**: Use Parent dimensions when available, App dimensions as fallback

**RESPONSIVE COMPONENT PATTERNS:**
```yaml
# Adaptive Button Width
Width: =If(Parent.Width > 0,
  If(Parent.Width < 200, Parent.Width * 0.9,
    If(Parent.Width < 400, Parent.Width * 0.8, 
      Min(Parent.Width * 0.7, 300))),
  App.Width * 0.15)

# Adaptive Button Height  
Height: =If(Parent.Height > 0,
  Max(Min(Parent.Height * 0.15, 56), 40),
  App.Height * 0.06)

# Container-Aware Sizing
Width: =If(And(Parent.Width > 0, Parent.Width < App.Width * 0.6),
  Parent.Width * 0.85,    # Small container - take most width
  Min(Parent.Width * 0.6, 400))  # Large container - limited width
```

### 10.15 Z-Index Management Best Practices
**CRITICAL**: Follow these layering best practices:

#### Consistent Layer Naming
```yaml
# Use consistent naming for layers
- 'Component.Background':     # Layer 1: Background
- 'Component.Container':      # Layer 2: Structure  
- 'Component.Content':        # Layer 3: Content
- 'Component.Actions':        # Layer 4: Interactive
- 'Component.Overlay':        # Layer 5: Effects
```

#### Component Layer Documentation
```yaml
# Document layer purpose in component definitions
ComponentDefinitions:
  ButtonComponent:
    Children:
      # === LAYER 1: BASE ===
      - 'Button.Container':
          Control: Classic/Button
          
      # === LAYER 2: CONTENT ===  
      - 'Button.Icon':
          Control: Classic/Icon
          
      # === LAYER 3: STATES ===
      - 'Button.Loading':
          Control: Classic/Icon
          
      # === LAYER 4: EFFECTS ===
      - 'Button.Hover':
          Control: Rectangle
      - 'Button.Focus':
          Control: Rectangle
```

#### Container-Based Layering
```yaml
# Group related controls in containers for better layer management
- 'Background.Layer':
    Control: GroupContainer
    Children:
      - 'Screen.Background':
          Control: Rectangle
          
- 'Content.Layer':
    Control: GroupContainer
    Children:
      - 'Main.Content':
          Control: Rectangle
          
- 'Interactive.Layer':
    Control: GroupContainer
    Children:
      - 'Action.Buttons':
          Control: Rectangle
          
- 'Overlay.Layer':
    Control: GroupContainer
    Children:
      - 'Modal.Background':
          Control: Rectangle
      - 'Loading.Indicator':
          Control: Classic/Icon
```

#### Conditional Layer Visibility
```yaml
# Use visibility to manage layers dynamically
- 'Button.Hover.Effect':
    Control: Rectangle
    Properties:
      Visible: =And(Self.Parent.IsHovered, Not(varIsLoading))
      
- 'Loading.Overlay':
    Control: Rectangle
    Properties:
      Visible: =varIsLoading
      
- 'Error.Message':
    Control: Rectangle
    Properties:
      Visible: =Not(IsBlank(varErrorMessage))
```

---

## 11. SHAREPOINT INTEGRATION RULES

### 11.1 SharePoint Column Types - CRITICAL `.Value` Usage
**CRITICAL**: Only use `.Value` syntax for actual Lookup and Choice columns. Many columns that appear to be Lookup/Choice are actually TEXT columns.

**RULE**: Test column behavior first. If you get "The '.' operator cannot be used on Text values" error, the column is TEXT type.

```yaml
# ‚úÖ CORRECT - Text columns (NO .Value needed)
Text: =ThisItem.MaVaiTro & " - " & ThisItem.MaDonVi
Fill: =If(ThisItem.MaVaiTro = "Admin", RGBA(0, 255, 0, 1), RGBA(255, 0, 0, 1))
Visible: =ThisItem.MaVaiTro = "Admin"

# ‚úÖ CORRECT - Actual Lookup/Choice columns (REQUIRES .Value)
Text: =ThisItem.TrangThai.Value & " - " & ThisItem.ChucDanh.Value
Fill: =If(ThisItem.TrangThai.Value = "HoatDong", RGBA(0, 255, 0, 1), RGBA(255, 0, 0, 1))
Visible: =ThisItem.GioiTinh.Value = "Nam"

# ‚ùå WRONG - Using .Value on Text columns
Text: =ThisItem.MaVaiTro.Value & " - " & ThisItem.MaDonVi.Value
Fill: =If(ThisItem.MaVaiTro.Value = "Admin", RGBA(0, 255, 0, 1), RGBA(255, 0, 0, 1))

# ‚ùå WRONG - Missing .Value on Choice columns
Text: =ThisItem.TrangThai & " - " & ThisItem.ChucDanh
Fill: =If(ThisItem.TrangThai = "HoatDong", RGBA(0, 255, 0, 1), RGBA(255, 0, 0, 1))
```

### 11.2 SharePoint Column Types Reference - UPDATED
**CRITICAL**: Categorized by actual column implementation:

#### Text Columns (NO `.Value` needed):
- `MaVaiTro` (Text column - stores role code as text)
- `MaDonVi` (Text column - stores department code as text)  
- `MaQuyen` (Text column - stores permission code as text)
- `Title`, `TenQuyen`, `MoTa`, `GiaTri` (Text/Number)
- `HoTen`, `Email`, `SoDienThoai`, `DiaChi` (Text)
- `NgayVaoLam`, `NgaySinh`, `NgayBatDau`, `NgayKetThuc` (Date)
- `TongNgayDuocPhep`, `SoNgayDaNghi`, `SoNgayConLai` (Number)
- `CoLuong`, `DangHoatDong` (Boolean)
- `MaDon`, `MaSoPhep`, `MaPheDuyet`, `MaQuyTrinh` (Text - GUID or codes)

#### Actual Lookup Columns (Require `.Value`):
- `MaNhanVien` (Lookup to NguoiDung table)
- `MaQuanLy` (Lookup to NguoiDung table) 
- `DonViCha` (Lookup to DonVi table) - if implemented as Lookup
- `CacQuyen` (Lookup to Quyen table)
- `NguoiBanGiao` (Lookup to NguoiDung table)
- `NguoiTao` (Lookup to NguoiDung table) 
- `MaLoai` (Lookup to LoaiNghi table)
- `MaDonVi` (Lookup to DonVi table) - in some contexts
- `MaVaiTro` (Lookup to VaiTro table) - in some contexts

#### Actual Choice Columns (Require `.Value`):
- `TrangThai` (Choice column with values "HoatDong", "KhongHoatDong", "ChoDuyetCap1", "ChoDuyetCap2", "ChoDuyetCap3", "DaDuyet", "TuChoi", "Huy", "HetHan")
- `ChucDanh` (Choice column) - if implemented as Choice
- `GioiTinh` (Choice column) - if implemented as Choice  
- `Buoi` (Choice column) - if implemented as Choice
- `BuoiNghi` (Choice column) - if implemented as Choice
- `UuTien` (Choice column) - if implemented as Choice
- `QuyetDinh` (Choice column with values "DaDuyet", "TuChoi")
- `Cap` (Choice column with values "1", "2", "3")

**IMPORTANT**: Always test column behavior before assuming Lookup/Choice type!

### 11.3 SharePoint Database Structure
**CURRENT DATABASE SCHEMA** for the Leave Management Application:

#### üìÑ List `Quyen` (Rights/Permissions)
```yaml
# Table structure:
Title: Text
TenQuyen: Text
MoTa: Text
GiaTri: Number
MaQuyen: Text
```

#### üìÑ List `VaiTro` (Roles)
```yaml
# Table structure:
Title: Text
TenVaiTro: Text
MoTa: Text
CacQuyen: Lookup (to Quyen) # REQUIRES .Value
MaVaiTro: Text
```

#### üìÑ List `DonVi` (Departments)
```yaml
# Table structure:
Title: Text
TenDonVi: Text
DonViCha: Lookup (to DonVi) # REQUIRES .Value
MaDonVi: Text
```

#### üìÑ List `NguoiDung` (Users)
```yaml
# Table structure:
Title: Text
HoTen: Text
Email: Text
SoDienThoai: Text
MatKhau: Text
ChucDanh: Choice # REQUIRES .Value
  # Values: "Nh√¢n vi√™n", "Gi√°m ƒë·ªëc kh·ªëi", "Gi√°m ƒë·ªëc ƒëi·ªÅu h√†nh", "Chuy√™n vi√™n", "Tr∆∞·ªüng ph√≤ng"
MaDonVi: Lookup (to DonVi) # REQUIRES .Value
MaVaiTro: Lookup (to VaiTro) # REQUIRES .Value
NgayVaoLam: Date
NgaySinh: Date
GioiTinh: Choice # REQUIRES .Value
  # Values: "Nam", "N·ªØ"
DiaChi: Text
TrangThai: Choice # REQUIRES .Value
  # Values: "HoatDong", "KhongHoatDong"
Avatar: Image/Attachment
MaQuanLy: Lookup (to NguoiDung) # REQUIRES .Value
MaNguoiDung: Text
```

#### üìÑ List `SoNgayPhep` (Leave Days)
```yaml
# Table structure:
Title: Text
MaNhanVien: Lookup (to NguoiDung) # REQUIRES .Value
Nam: Number
TongNgayDuocPhep: Number
SoNgayDaNghi: Number
SoNgayConLai: Number
SoNgayKhongLuong: Number
MaSoPhep: Text
```

#### üìÑ List `NgayLe` (Holidays)
```yaml
# Table structure:
TenNgayLe: Text
Ngay: Text # or Date
Buoi: Choice # REQUIRES .Value
Nam: Number
MaNgayLe: Text
```

#### üìÑ List `LoaiNghi` (Leave Types)
```yaml
# Table structure:
Title: Text
TenLoai: Text
CoLuong: Boolean
MoTa: Text
MaLoai: Text
```

#### üìÑ List `CauHinhHeThong` (System Configuration)
```yaml
# Table structure:
Title: Text
TenCauHinh: Text
KieuDuLieu: Choice # REQUIRES .Value
  # Values: "Number", "Text", "Boolean"
GiaTri: Text
MoTa: Text
MaCauHinh: Text
```

#### üìÑ List `MauEmail` (Email Templates)
```yaml
# Table structure:
Title: Text
TenMau: Text
TieuDe: Text
NoiDung: Multiline Text (HTML)
ThamSo: JSON String
LoaiSuKien: Choice # REQUIRES .Value
TrangThai: Choice # REQUIRES .Value
  # Values: "HoatDong", "KhongHoatDong"
MaMau: Text
```

#### üìÑ List `DonNghiPhep` (Leave Requests)
```yaml
# Table structure:
Title: Text (GUID)
MaNguoiDung: Lookup (to NguoiDung) # REQUIRES .Value
NgayBatDau: Date
NgayKetThuc: Date
SoNgayNghi: Number
MaLoai: Lookup (to LoaiNghi) # REQUIRES .Value
LyDo: Text
NguoiBanGiao: Lookup (to NguoiDung) # REQUIRES .Value
NoiDungBanGiao: Text
TrangThai: Choice # REQUIRES .Value
  # Values: "ChoDuyetCap1", "ChoDuyetCap2", "ChoDuyetCap3", "DaDuyet", "TuChoi", "Huy", "HetHan"
BuoiNghi: Choice # REQUIRES .Value
  # Values: "CaNgay", "Sang", "Chieu"
NguoiTao: Lookup (to NguoiDung) # REQUIRES .Value
ThoiHanPheDuyet: Date
UuTien: Choice # REQUIRES .Value
  # Values: "BinhThuong", "KhanCap"
GhiChuHR: Text
MaDon: Text (GUID)
```

#### üìÑ List `PheDuyetDon` (Approval Records)
```yaml
# Table structure:
MaPheDuyet: Text
MaDon: Lookup (to DonNghiPhep) # REQUIRES .Value
Cap: Choice # REQUIRES .Value
  # Values: "1", "2", "3"
Quy·∫øtDinh: Choice # REQUIRES .Value
  # Values: "DaDuyet", "TuChoi"
GhiChu: Text
MaNguoiDuyet: Lookup (to NguoiDung) # REQUIRES .Value
```

#### üìÑ List `QuyTrinhDuyet` (Approval Workflow)
```yaml
# Table structure:
MaQuyTrinh: Text
MaDonVi: Lookup (to DonVi) # REQUIRES .Value
Cap: Choice # REQUIRES .Value
  # Values: "1", "2", "3"
MaVaiTro: Lookup (to VaiTro) # REQUIRES .Value
NguoiDuyetMacDinh: Lookup (to NguoiDung) # REQUIRES .Value
DangHoatDong: Boolean
```

### 11.4 SharePoint Formula Examples
**CORRECT** usage patterns for SharePoint data:

```yaml
# Gallery Items with SharePoint data
Items: =Filter(DonNghiPhep, MaNguoiDung.Value = varCurrentUser.ID)

# Text display with Lookup Values
Text: =ThisItem.MaNguoiDung.Value & " - " & ThisItem.TrangThai.Value

# Conditional logic with Choice Values
Visible: =ThisItem.TrangThai.Value = "Pending"
Fill: =Switch(ThisItem.TrangThai.Value, "Approved", RGBA(0, 255, 0, 0.1), "Rejected", RGBA(255, 0, 0, 0.1), "Pending", RGBA(255, 255, 0, 0.1), RGBA(128, 128, 128, 0.1))

# Filter with multiple Lookup/Choice conditions
Items: =Filter(DonNghiPhep, And(MaNguoiDung.Value = varSelectedUser.ID, TrangThai.Value In ["Pending", "Approved"], MaLoai.Value = varSelectedLeaveType.ID))
```

### 11.5 SharePoint Data Validation Rules
**MANDATORY** validation for SharePoint integration:

```yaml
# ‚úÖ CORRECT - Always use .Value for SharePoint Lookup/Choice
OnSelect: =If(And(Not(IsBlank(ThisItem.MaNguoiDung.Value)), ThisItem.TrangThai.Value = "Pending"), Navigate(ApprovalScreen, ScreenTransition.Slide), Notify("Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c n√†y", NotificationType.Error))

# ‚ùå WRONG - Missing .Value will cause errors
OnSelect: =If(And(Not(IsBlank(ThisItem.MaNguoiDung)), ThisItem.TrangThai = "Pending"), Navigate(ApprovalScreen, ScreenTransition.Slide), Notify("Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c n√†y", NotificationType.Error))
```

### 11.6 SharePoint Choice Values Reference
**CRITICAL**: Use these EXACT values when working with Choice columns:

#### **PheDuyetDon** Choice Values:
```yaml
Cap: "1", "2", "3"
QuyetDinh: "DaDuyet", "TuChoi"
```

#### **DonNghiPhep** Choice Values:
```yaml
TrangThai: "ChoDuyetCap1", "ChoDuyetCap2", "ChoDuyetCap3", "DaDuyet", "TuChoi", "Huy", "HetHan"
BuoiNghi: "CaNgay", "Sang", "Chieu"
UuTien: "BinhThuong", "KhanCap"
```

#### **QuyTrinhDuyet** Choice Values:
```yaml
Cap: "1", "2", "3"
```

#### **NguoiDung** Choice Values:
```yaml
ChucDanh: "Nh√¢n vi√™n", "Gi√°m ƒë·ªëc kh·ªëi", "Gi√°m ƒë·ªëc ƒëi·ªÅu h√†nh", "Chuy√™n vi√™n", "Tr∆∞·ªüng ph√≤ng"
GioiTinh: "Nam", "N·ªØ"
TrangThai: "HoatDong", "KhongHoatDong"
```

#### **MauEmail** Choice Values:
```yaml
TrangThai: "HoatDong", "KhongHoatDong"
```

#### **CauHinhHeThong** Choice Values:
```yaml
KieuDuLieu: "Number", "Text", "Boolean"
```

#### **Usage Examples with Choice Values:**
```yaml
# ‚úÖ CORRECT - Using exact Choice values with .Value
Visible: =ThisItem.TrangThai.Value = "ChoDuyetCap1"
Fill: =If(ThisItem.GioiTinh.Value = "Nam", RGBA(0, 120, 212, 1), RGBA(232, 17, 35, 1))
Items: =Filter(DonNghiPhep, TrangThai.Value In ["ChoDuyetCap1", "ChoDuyetCap2", "ChoDuyetCap3"])

# ‚ùå WRONG - Using incorrect Choice values
Visible: =ThisItem.TrangThai.Value = "Pending"  # Should be "ChoDuyetCap1"
Fill: =If(ThisItem.GioiTinh.Value = "Male", ...) # Should be "Nam"
```

---

## üö® CRITICAL REMINDERS

1. **CORRECT COMPONENT STRUCTURE** - Use `ComponentDefinitions` with proper custom property syntax
2. **NO ABSOLUTE VALUES** - Everything must be relative
3. **WRAP SPECIAL NAMES** - Use single quotes for names with special characters
4. **FORMULA PREFIX** - All dynamic properties start with `=`
5. **RGBA COLORS** - Always use RGBA format for colors
6. **RELATIVE POSITIONING** - Position everything relative to parent or other controls
7. **EVENT SYNTAX** - Call events with parentheses: `ComponentName.EventName()`
8. **CUSTOM PROPERTIES** - Use `PropertyKind`, `DataType`, `Default` (not old syntax)
9. **SINGLE LINE FORMULAS** - Never use multi-line formulas in YAML
10. **CONTROL REFERENCES** - Wrap control names with dots in single quotes
11. **VALID SELF PROPERTIES** - Never use `Self.Focused` or `Self.IsHovered`
12. **BUTTON PROPERTIES** - Never use `BorderRadius`, `Disabled`, or `Align` for Classic/Button
13. **RECTANGLE RADIUS** - Use `BorderRadius` only, not individual corner properties
14. **APPROVED ICONS ONLY** - Only use icons from the approved list in section 6.1
15. **VALID ICON NAMES** - Verify all icon references exist in Power Apps
16. **TEXT FUNCTION WITH RGBA** - Never use Text() function with RGBA values
17. **TEXTINPUT FOCUS PROPERTY** - Classic/TextInput does NOT support .Focused property. Use solid colors instead
18. **ACTION PROPERTIES PIPE** - ALWAYS use pipe operator (|) for ALL action properties (OnVisible, OnSelect, OnChange, etc.)
19. **TEXTINPUT MODE PROPERTY** - Use `Mode:` not `TextMode:` for Classic/TextInput
20. **RECTANGLE DROPSHADOW** - Rectangle controls do NOT support DropShadow property
21. **RECTANGLE BORDERRADIUS** - Rectangle controls do NOT support BorderRadius property
22. **SHAREPOINT COLUMN TESTING** - CRITICAL: Test column behavior first. If "The '.' operator cannot be used on Text values" error occurs, it's a TEXT column
23. **SHAREPOINT CHOICE COLUMNS** - TrangThai is Choice column (REQUIRES .Value), e.g., TrangThai.Value = "HoatDong"
24. **SHAREPOINT TEXT COLUMNS** - MaVaiTro, MaDonVi are TEXT columns (NO .Value needed), e.g., MaVaiTro = "Admin"
25. **SHAREPOINT CHOICE VALUES** - Use EXACT values from database schema (e.g., "HoatDong", "Nam", "ChoDuyetCap1")
26. **COMPONENT PROPORTIONAL SIZING** - Components must use proportional App sizing (e.g., Width: =App.Width * 0.2)
27. **COMPONENT PARENT-FITTING** - Components must adapt to parent context with responsive constraints (Min/Max sizing)
28. **CONTROL Z-INDEX ORDER** - CRITICAL: Later controls appear ON TOP. Order: Background‚ÜíContent‚ÜíInteractive‚ÜíOverlays
29. **LAYERING HIERARCHY** - MANDATORY: Follow exact order: Background(1st)‚ÜíContainers(2nd)‚ÜíContent(3rd)‚ÜíActions(4th)‚ÜíEffects(5th)‚ÜíOverlays(Last)
30. **PARENT-CHILD COORDINATES** - CRITICAL: Child control X=0/Y=0 equals Parent's left/top edge. Always use parent-relative positioning for child controls
31. **GEOMETRIC CONTROLS CONTAINERS** - CRITICAL: Rectangle, Circle, Triangle cannot have Children. Use GroupContainer for containers, DataTable for data tables
32. **RECTANGLE VARIANT PROPERTY** - CRITICAL: Rectangle controls do NOT support Variant property. Never use Variant with Rectangle controls
33. **GALLERY TEMPLATEBODY SYNTAX** - CRITICAL: Gallery controls use Children property, NOT TemplateBody property in Power Apps YAML. Never use TemplateBody: array syntax - use Children: array instead
34. **YAML SYNTAX COMPLIANCE** - CRITICAL: Never use TemplateBody property for Gallery controls. Power Apps YAML requires Children property for Gallery template controls
35. **YAML INDENTATION COMPLIANCE** - CRITICAL: Always maintain proper YAML indentation and hierarchy. Child controls must be properly nested with consistent spacing (2 or 4 spaces). Incorrect indentation causes "did not find expected key" parsing errors
36. **COMPONENT EVENT CALL SYNTAX** - CRITICAL: When calling component events in screen properties, use proper syntax: ComponentName.EventName(); followed by additional actions. Never call events without parentheses or proper component reference
37. **PREVIEW DEMO DATA** - CRITICAL: Always provide fallback demo data in OnVisible for better preview experience when SharePoint/external data sources are not available. Use simple object structures for user data and sample collections for galleries
38. **DEMO DATA TYPE COMPATIBILITY** - CRITICAL: When creating demo data in context variables, use simple text/number values instead of nested objects like {Value: "text"}. This avoids "Incompatible type" errors while still allowing SharePoint .Value access patterns in real data scenarios. Demo data should use flat structure: `MaVaiTro: "Employee"` not `MaVaiTro: {Value: "Employee"}`
39. **COMPONENT PROPERTY BINDING** - CRITICAL: When using components in screens, ALL custom properties must be properly bound. Never leave component custom properties unset - this causes display and behavior issues. Check component definition for all custom properties and bind them appropriately
40. **COMPONENT EVENT BINDING** - CRITICAL: Component events must be bound to actions in screens, not called directly. Use proper event binding syntax: `OnEventName: |` followed by action formulas. Never call component events like `ComponentName.EventName()` from screens - this causes "Component behavior can only be invoked from within a component" errors
41. **YAML COMMENT SYNTAX** - CRITICAL: Never use inline comments in YAML property values. Comments must be on separate lines above the property. WRONG: `Width: =100 # comment`. CORRECT: `# comment` then `Width: =100` on next line

**Agent must follow these rules ABSOLUTELY when generating Power App YAML code.**

### 9.22 Control Z-Index Violations
**CRITICAL**: Avoid these common z-index mistakes:

```yaml
# ‚ùå WRONG - Control not in correct layer
- 'Suspected.Overlay':
    Control: Rectangle
    Properties:
      Visible: =false  # Temporarily hide to test
      Fill: =RGBA(255, 0, 0, 0.3)  # Make visible with red tint
```

### 9.23 Parent-Child Coordinate Errors
**CRITICAL**: Avoid these common parent-child positioning mistakes:

#### Using Absolute Screen Coordinates for Child Controls
```yaml
# ‚ùå WRONG - Child using absolute screen coordinates
- 'Login.Container':
    Control: Rectangle
    Properties:
      X: =100
      Y: =50
      Width: =400
      Height: =300
    Children:
      - 'Login.Title':
          Control: Label
          Properties:
            X: =120    # ‚ùå WRONG - Absolute screen coordinate
            Y: =70     # ‚ùå WRONG - Absolute screen coordinate
            # This positions the title at screen coordinate (120, 70)
            # instead of being 20px from parent's edges

# ‚úÖ CORRECT - Child using parent-relative coordinates
- 'Login.Container':
    Control: Rectangle
    Properties:
      X: =100
      Y: =50
      Width: =400
      Height: =300
    Children:
      - 'Login.Title':
          Control: Label
          Properties:
            X: =20     # ‚úÖ CORRECT - 20px from parent's left edge
            Y: =20     # ‚úÖ CORRECT - 20px from parent's top edge
```

#### Misunderstanding Parent.X and Parent.Y References
```yaml
# ‚ùå WRONG - Misusing Parent.X/Parent.Y in child controls
- 'Container':
    Control: Rectangle
    Properties:
      X: =100
      Y: =50
    Children:
      - 'Child':
          Control: Label
          Properties:
            X: =Parent.X + 20    # ‚ùå WRONG - Results in X=120 (absolute)
            Y: =Parent.Y + 20    # ‚ùå WRONG - Results in Y=70 (absolute)
            # Child coordinates are already relative to parent!

# ‚úÖ CORRECT - Direct relative positioning
- 'Container':
    Control: Rectangle
    Properties:
      X: =100
      Y: =50
    Children:
      - 'Child':
          Control: Label
          Properties:
            X: =20               # ‚úÖ CORRECT - 20px from parent's left edge
            Y: =20               # ‚úÖ CORRECT - 20px from parent's top edge
```

#### Incorrect Full-Container Coverage
```yaml
# ‚ùå WRONG - Trying to cover full parent incorrectly
- 'Container':
    Control: Rectangle
    Properties:
      X: =100
      Y: =50
      Width: =400
      Height: =300
    Children:
      - 'Background':
          Control: Rectangle
          Properties:
            X: =Parent.X         # ‚ùå WRONG - Results in X=100 (offset from parent)
            Y: =Parent.Y         # ‚ùå WRONG - Results in Y=50 (offset from parent)
            Width: =400          # ‚ùå WRONG - Hardcoded value
            Height: =300         # ‚ùå WRONG - Hardcoded value

# ‚úÖ CORRECT - Proper full-container coverage
- 'Container':
    Control: Rectangle
    Properties:
      X: =100
      Y: =50
      Width: =400
      Height: =300
    Children:
      - 'Background':
          Control: Rectangle
          Properties:
            X: =0                # ‚úÖ CORRECT - Left edge of parent
            Y: =0                # ‚úÖ CORRECT - Top edge of parent
            Width: =Parent.Width # ‚úÖ CORRECT - Full parent width
            Height: =Parent.Height # ‚úÖ CORRECT - Full parent height
```

#### Wrong Edge Alignment in Containers
```yaml
# ‚ùå WRONG - Incorrect right/bottom edge alignment
- 'Container':
    Control: Rectangle
    Properties:
      Width: =400
      Height: =300
    Children:
      - 'TopRightIcon':
          Control: Classic/Icon
          Properties:
            X: =Parent.X + Parent.Width - 40  # ‚ùå WRONG - Double offset
            Y: =Parent.Y                      # ‚ùå WRONG - Unnecessary Parent.Y
            Width: =40
            Height: =40

# ‚úÖ CORRECT - Proper edge alignment
- 'Container':
    Control: Rectangle
    Properties:
      Width: =400
      Height: =300
    Children:
      - 'TopRightIcon':
          Control: Classic/Icon
          Properties:
            X: =Parent.Width - 40             # ‚úÖ CORRECT - Right edge alignment
            Y: =0                             # ‚úÖ CORRECT - Top edge alignment
            Width: =40
            Height: =40
```

#### Incorrect Centering in Parent
```yaml
# ‚ùå WRONG - Incorrect centering calculation
- 'Container':
    Control: Rectangle
    Properties:
      X: =100
      Y: =50
      Width: =400
      Height: =300
    Children:
      - 'CenteredButton':
          Control: Classic/Button
          Properties:
            X: =Parent.X + (Parent.Width - Self.Width) / 2  # ‚ùå WRONG - Double offset
            Y: =Parent.Y + (Parent.Height - Self.Height) / 2 # ‚ùå WRONG - Double offset
            Width: =200
            Height: =50

# ‚úÖ CORRECT - Proper centering in parent
- 'Container':
    Control: Rectangle
    Properties:
      X: =100
      Y: =50
      Width: =400
      Height: =300
    Children:
      - 'CenteredButton':
          Control: Classic/Button
          Properties:
            X: =(Parent.Width - Self.Width) / 2   # ‚úÖ CORRECT - Centered horizontally
            Y: =(Parent.Height - Self.Height) / 2 # ‚úÖ CORRECT - Centered vertically
            Width: =200
            Height: =50
```

#### **REMEMBER**: 
- **Child coordinates are ALWAYS relative to parent boundaries**
- **X=0, Y=0 means parent's top-left corner**
- **Never add Parent.X or Parent.Y to child coordinates**
- **Use Parent.Width/Parent.Height for sizing, not absolute values**

### 9.11 YAML Syntax for Action Properties
**CRITICAL**: Use pipe operator (`|`) for ALL action properties to ensure consistency and prevent YAML parsing errors:

#### For ALL Action Properties (OnVisible, OnSelect, OnChange, etc.):
```yaml
# ‚úÖ CORRECT - Always use pipe operator for action properties
OnVisible: |
  =Set(varActiveScreen, "Dashboard"); Set(varCurrentUser, LookUp(NguoiDung, Email = User().Email))

OnSelect: |
  =Set(varIsLoading, true); Navigate(NextScreen)

OnChange: |
  =Set(varInputValue, Self.Text); UpdateContext({localVar: true})

# ‚ùå WRONG - Single line action properties can cause YAML parsing issues
OnVisible: =Set(varActiveScreen, "Dashboard"); Set(varCurrentUser, LookUp(NguoiDung, Email = User().Email))
OnSelect: =Set(varIsLoading, true); Navigate(NextScreen)
```

#### For Simple Display Properties:
```yaml
# ‚úÖ CORRECT - Single line for simple properties
Text: =Concatenate("Hello ", varUserName)
Visible: =varShowControl
Fill: =RGBA(255, 255, 255, 1)

# ‚úÖ CORRECT - Use pipe operator for complex display properties
Text: |
  =Concatenate("Status: ", Switch(ThisItem.Status, "Active", "Ho·∫°t ƒë·ªông", "Inactive", "Kh√¥ng ho·∫°t ƒë·ªông", "Unknown"))
```

**MANDATORY Rules for Action Properties:**
- **OnVisible**: ALWAYS use pipe operator (`|`)
- **OnSelect**: ALWAYS use pipe operator (`|`) 
- **OnChange**: ALWAYS use pipe operator (`|`)
- **OnHover**: ALWAYS use pipe operator (`|`)
- **OnFocus**: ALWAYS use pipe operator (`|`)
- **OnBlur**: ALWAYS use pipe operator (`|`)
- **ALWAYS** place the pipe operator (`|`) immediately after the property name and colon
- **ALWAYS** indent the formula content with proper spacing (typically 2 spaces)

**RULES for Property Types:**
- **Action Properties (OnXXX):** ALWAYS use pipe operator (`|`)
- **Simple Display Properties:** Use single line unless formula is complex
- **Complex Display Properties:** Use pipe operator (`|`) for readability

### 9.24 YAML Indentation and Hierarchy Errors
**CRITICAL**: Maintain proper YAML indentation to avoid "did not find expected key" parsing errors:

```yaml
# ‚ùå WRONG - Incorrect indentation hierarchy
Children:
  - 'Container1':
      Control: GroupContainer
      Children:
        - 'Child1':
            Control: Label
- 'Container2':        # ‚ùå WRONG - Inconsistent indentation
    Control: Rectangle

# ‚úÖ CORRECT - Proper indentation hierarchy
Children:
  - 'Container1':
      Control: GroupContainer
      Children:
        - 'Child1':
            Control: Label
  - 'Container2':      # ‚úÖ CORRECT - Consistent indentation level
      Control: Rectangle
```

**RULES for YAML Indentation:**
- **Consistent Spacing**: Use consistent indentation (2 or 4 spaces throughout)
- **Proper Hierarchy**: Child elements must be properly nested under parent
- **Array Items**: Use `-` for array items at correct indentation level
- **Property Alignment**: Properties within same level should align perfectly

**COMMON INDENTATION ERRORS:**
- Mixing tabs and spaces
- Inconsistent indentation levels
- Improper nesting of Children arrays
- Missing or extra spaces in property declarations

### 9.25 Component Event Binding Errors
**CRITICAL ERROR**: "Component behavior can only be invoked from within a component"

```yaml
# ‚ùå WRONG - Calling component events directly from screens
- 'MyComponent':
    Control: CanvasComponent
    ComponentName: NavigationComponent
    Properties:
      OnNavigate: ='MyComponent'.OnNavigate(); Set(varAction, true)    # ERROR
      OnToggleCollapse: ='MyComponent'.OnToggleCollapse(); Set(varCollapsed, true)  # ERROR

# ‚úÖ CORRECT - Binding actions to component events
- 'MyComponent':
    Control: CanvasComponent
    ComponentName: NavigationComponent
    Properties:
      OnNavigate: |
        =Set(varAction, true)                    # Bind action to event
      OnToggleCollapse: |
        =Set(varCollapsed, !varCollapsed)        # Bind action to event
```

**COMPONENT EVENT BINDING RULES:**
- **In Screen**: Bind actions to component event properties using pipe operator (`|`)
- **In Component**: Call internal events using `ComponentName.EventName()` syntax
- **NEVER**: Call component events directly from screens with `ComponentInstance.EventName()` syntax
- **ALWAYS**: Use event binding pattern for screen-to-component communication

**CORRECT WORKFLOW:**
1. **Component Definition**: Define event as custom property with `PropertyKind: Event`
2. **Component Internal**: Call `ComponentName.EventName()` on button clicks
3. **Screen Usage**: Bind actions to event properties with `OnEventName: | =Action()`
4. **Execution**: Component triggers event ‚Üí Screen bound action executes
