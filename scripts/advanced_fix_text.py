#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script n√¢ng cao ƒë·ªÉ s·ª≠a l·ªói text formatting trong file YAML Power App
T√πy ch·ªçn x·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p kh√°c nhau
"""

import os
import glob
import re
import argparse

def fix_text_patterns(content, fix_colon_space=True, fix_notification_text=False):
    """
    T√¨m v√† s·ª≠a l·ªói trong c√°c chu·ªói ƒë∆∞·ª£c bao b·ªüi d·∫•u ngo·∫∑c k√©p
    
    Args:
        content (str): N·ªôi dung file
        fix_colon_space (bool): S·ª≠a ": " th√†nh ":"
        fix_notification_text (bool): S·ª≠a text trong notification (√≠t an to√†n h∆°n)
    """
    result = ""
    i = 0
    
    while i < len(content):
        if content[i] == '"':
            # T√¨m th·∫•y d·∫•u " m·ªü
            result += content[i]  # Th√™m d·∫•u "
            i += 1
            
            # T√¨m d·∫•u " ƒë√≥ng
            quote_content = ""
            while i < len(content) and content[i] != '"':
                quote_content += content[i]
                i += 1
            
            # X·ª≠ l√Ω n·ªôi dung trong d·∫•u ngo·∫∑c k√©p
            fixed_content = quote_content
            
            # S·ª≠a ": " th√†nh ":" (tr·ª´ m·ªôt s·ªë tr∆∞·ªùng h·ª£p ngo·∫°i l·ªá)
            if fix_colon_space:
                # Kh√¥ng s·ª≠a n·∫øu ƒë√¢y l√† notification ho·∫∑c m·ªôt s·ªë tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
                is_notification = any(keyword in quote_content.lower() for keyword in [
                    'notify', 'th√¥ng b√°o', 'ƒë√£ x√≥a', 't·∫£i xu·ªëng', 'm·ªü file'
                ])
                
                if not is_notification or fix_notification_text:
                    # S·ª≠a ": " th√†nh ":" cho labels v√† text th√¥ng th∆∞·ªùng
                    if any(label in quote_content for label in [
                        'Email:', 'T√™n:', 'H·ªç t√™n:', 'Vai tr√≤:', 'Ph√≤ng ban:', 
                        'Tr·∫°ng th√°i:', 'Ng√†y t·∫°o:', 'ƒê∆°n:', 'File:', 'K√≠ch th∆∞·ªõc:',
                        'ƒê√£ ch·ªçn file:', 'Lo·∫°i:', 'Th·ªùi gian:', 'Ng∆∞·ªùi t·∫°o:'
                    ]):
                        fixed_content = fixed_content.replace(': ', ':')
            
            result += fixed_content
            
            # Th√™m d·∫•u " ƒë√≥ng n·∫øu t√¨m th·∫•y
            if i < len(content):
                result += content[i]  # Th√™m d·∫•u " ƒë√≥ng
                i += 1
        else:
            result += content[i]
            i += 1
    
    return result

def process_file(file_path, fix_colon_space=True, fix_notification_text=False, dry_run=False):
    """
    X·ª≠ l√Ω m·ªôt file YAML
    """
    print(f"X·ª≠ l√Ω: {file_path}")
    
    try:
        # ƒê·ªçc file
        with open(file_path, 'r', encoding='utf-8') as f:
            original = f.read()
        
        # S·ª≠a l·ªói
        fixed = fix_text_patterns(original, fix_colon_space, fix_notification_text)
        
        # Ki·ªÉm tra c√≥ thay ƒë·ªïi kh√¥ng
        if original != fixed:
            if dry_run:
                # Hi·ªÉn th·ªã diff
                print(f"  üìù [DRY RUN] S·∫Ω c√≥ thay ƒë·ªïi:")
                lines_orig = original.split('\n')
                lines_fixed = fixed.split('\n')
                for i, (orig_line, fixed_line) in enumerate(zip(lines_orig, lines_fixed)):
                    if orig_line != fixed_line:
                        print(f"    D√≤ng {i+1}:")
                        print(f"      C≈©:  {orig_line.strip()}")
                        print(f"      M·ªõi: {fixed_line.strip()}")
                        if i > 5:  # Gi·ªõi h·∫°n hi·ªÉn th·ªã
                            remaining = sum(1 for o, f in zip(lines_orig[i:], lines_fixed[i:]) if o != f)
                            if remaining > 0:
                                print(f"    ... v√† {remaining} thay ƒë·ªïi kh√°c")
                            break
            else:
                # T·∫°o backup
                backup_path = file_path + '.backup'
                with open(backup_path, 'w', encoding='utf-8') as f:
                    f.write(original)
                
                # Ghi file m·ªõi
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(fixed)
                
                changes = original.count(': ') - fixed.count(': ')
                print(f"  ‚úÖ ƒê√£ s·ª≠a {changes} l·ªói, backup: {backup_path}")
        else:
            print(f"  ‚ö™ Kh√¥ng c√≥ thay ƒë·ªïi")
    
    except Exception as e:
        print(f"  ‚ùå L·ªói: {e}")

def main():
    parser = argparse.ArgumentParser(
        description='S·ª≠a l·ªói text formatting trong file YAML Power App'
    )
    parser.add_argument(
        '--file',
        help='X·ª≠ l√Ω m·ªôt file c·ª• th·ªÉ'
    )
    parser.add_argument(
        '--directory',
        default='.',
        help='Th∆∞ m·ª•c ch·ª©a file YAML (m·∫∑c ƒë·ªãnh: th∆∞ m·ª•c hi·ªán t·∫°i)'
    )
    parser.add_argument(
        '--no-colon-fix',
        action='store_true',
        help='Kh√¥ng s·ª≠a ": " th√†nh ":"'
    )
    parser.add_argument(
        '--fix-notifications',
        action='store_true',
        help='C≈©ng s·ª≠a text trong notifications (kh√¥ng an to√†n)'
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='Ch·ªâ hi·ªÉn th·ªã nh·ªØng g√¨ s·∫Ω thay ƒë·ªïi'
    )
    
    args = parser.parse_args()
    
    print("üîß Script s·ª≠a l·ªói text formatting n√¢ng cao")
    print("="*45)
    
    if args.file:
        # X·ª≠ l√Ω m·ªôt file c·ª• th·ªÉ
        if os.path.exists(args.file):
            process_file(
                args.file, 
                fix_colon_space=not args.no_colon_fix,
                fix_notification_text=args.fix_notifications,
                dry_run=args.dry_run
            )
        else:
            print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {args.file}")
    else:
        # T√¨m t·∫•t c·∫£ file YAML
        os.chdir(args.directory)
        yaml_files = []
        for pattern in ['*.yaml', '*.yml']:
            yaml_files.extend(glob.glob(pattern, recursive=False))
            yaml_files.extend(glob.glob(f'**/{pattern}', recursive=True))
        
        yaml_files = sorted(set(yaml_files))
        
        print(f"üìÅ T√¨m th·∫•y {len(yaml_files)} file YAML")
        if args.dry_run:
            print("üìã DRY RUN MODE - Kh√¥ng thay ƒë·ªïi file th·ª±c s·ª±")
        
        for file_path in yaml_files:
            process_file(
                file_path,
                fix_colon_space=not args.no_colon_fix,
                fix_notification_text=args.fix_notifications,
                dry_run=args.dry_run
            )
    
    print("\n‚úÖ Ho√†n t·∫•t!")

if __name__ == "__main__":
    main() 