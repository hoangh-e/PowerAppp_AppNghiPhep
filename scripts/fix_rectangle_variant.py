#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ƒë·ªÉ x√≥a Variant property kh·ªèi Rectangle controls
"""

import os
import glob
import re

def fix_rectangle_variants(content):
    """
    X√≥a Variant property kh·ªèi Rectangle controls
    """
    lines = content.split('\n')
    result_lines = []
    changes_made = []
    
    i = 0
    while i < len(lines):
        line = lines[i]
        
        # T√¨m Rectangle control
        if 'Control: Rectangle' in line and not line.strip().startswith('#'):
            result_lines.append(line)
            current_indent = len(line) - len(line.lstrip())
            
            # Ki·ªÉm tra c√°c d√≤ng ti·∫øp theo trong block n√†y
            j = i + 1
            while j < len(lines):
                next_line = lines[j]
                
                # N·∫øu g·∫∑p d√≤ng tr·ªëng, th√™m v√†o
                if next_line.strip() == '':
                    result_lines.append(next_line)
                    j += 1
                    continue
                
                next_indent = len(next_line) - len(next_line.lstrip())
                
                # N·∫øu indent <= current_indent v√† c√≥ content, nghƒ©a l√† h·∫øt block
                if next_indent <= current_indent and next_line.strip():
                    break
                
                # N·∫øu l√† Variant property, b·ªè qua (kh√¥ng th√™m v√†o result)
                if 'Variant:' in next_line:
                    changes_made.append(f"X√≥a Variant property ·ªü d√≤ng {j+1}")
                    j += 1
                    continue
                
                # Th√™m c√°c d√≤ng kh√°c
                result_lines.append(next_line)
                j += 1
            
            i = j
        else:
            result_lines.append(line)
            i += 1
    
    return '\n'.join(result_lines), changes_made

def process_file(file_path):
    """
    X·ª≠ l√Ω m·ªôt file YAML
    """
    print(f"Ki·ªÉm tra: {file_path}")
    
    try:
        # ƒê·ªçc file
        with open(file_path, 'r', encoding='utf-8') as f:
            original = f.read()
        
        # Ki·ªÉm tra c√≥ Rectangle + Variant kh√¥ng
        if 'Control: Rectangle' not in original:
            print(f"  ‚ö™ Kh√¥ng c√≥ Rectangle control")
            return
        
        # S·ª≠a l·ªói
        fixed, changes = fix_rectangle_variants(original)
        
        # Ki·ªÉm tra c√≥ thay ƒë·ªïi kh√¥ng
        if original != fixed and changes:
            # T·∫°o backup
            backup_path = file_path + '.rectangle_backup'
            with open(backup_path, 'w', encoding='utf-8') as f:
                f.write(original)
            
            # Ghi file m·ªõi
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(fixed)
            
            print(f"  ‚úÖ ƒê√£ s·ª≠a file:")
            for change in changes:
                print(f"     ‚Üí {change}")
            print(f"  üìÅ Backup: {backup_path}")
        else:
            print(f"  ‚ö™ Kh√¥ng c√≥ Rectangle + Variant n√†o c·∫ßn s·ª≠a")
    
    except Exception as e:
        print(f"  ‚ùå L·ªói: {e}")

def main():
    print("üîß X√≥a Variant property kh·ªèi Rectangle controls")
    print("="*50)
    
    # T√¨m t·∫•t c·∫£ file YAML
    yaml_files = []
    for pattern in ['*.yaml', '*.yml']:
        yaml_files.extend(glob.glob(pattern, recursive=False))
        yaml_files.extend(glob.glob(f'**/{pattern}', recursive=True))
    
    yaml_files = sorted(set(yaml_files))
    
    print(f"üìÅ T√¨m th·∫•y {len(yaml_files)} file YAML")
    print("\nüöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...")
    
    total_fixed = 0
    for file_path in yaml_files:
        if process_file(file_path):
            total_fixed += 1
    
    print(f"\n‚úÖ Ho√†n t·∫•t! ƒê√£ s·ª≠a {total_fixed} files")
    print("\nüìã L·ªói ƒë√£ fix:")
    print("- Rectangle + Variant ‚Üí X√≥a Variant property")
    print("- Backup files ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông")

if __name__ == "__main__":
    main() 