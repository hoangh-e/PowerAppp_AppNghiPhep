#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ƒë·ªÉ t√¨m v√† s·ª≠a c√°c l·ªói PA2108: Unknown property cho c√°c control types
"""

import os
import glob
import re

# Dictionary mapping c√°c l·ªói PA2108 ph·ªï bi·∫øn
PA2108_FIXES = {
    # GroupContainer kh√¥ng h·ªó tr·ª£ event properties
    'GroupContainer': {
        'forbidden_properties': ['OnSelect', 'OnClick', 'OnHover', 'OnChange'],
        'replacement_control': 'Rectangle',
        'remove_variant': True  # X√≥a Variant: ManualLayout khi chuy·ªÉn sang Rectangle
    },
    
    # Rectangle kh√¥ng h·ªó tr·ª£ Variant property
    'Rectangle': {
        'forbidden_properties': ['RadiusBottomLeft', 'RadiusBottomRight', 'RadiusTopLeft', 'RadiusTopRight'],
        'forbidden_variants': ['ManualLayout', 'AutoLayout'],  # Rectangle kh√¥ng c√≥ Variant
        'replacement_control': None,
        'remove_variant': True,  # Lu√¥n x√≥a Variant cho Rectangle
        'property_replacements': {
            # C√°c individual radius properties s·∫Ω ƒë∆∞·ª£c thay b·∫±ng BorderRadius
            'RadiusBottomLeft': 'BorderRadius',
            'RadiusBottomRight': 'BorderRadius', 
            'RadiusTopLeft': 'BorderRadius',
            'RadiusTopRight': 'BorderRadius'
        }
    },
    
    # Gallery VariableHeight kh√¥ng h·ªó tr·ª£ WrapCount
    'Gallery_VariableHeight': {
        'forbidden_properties': ['WrapCount'],
        'replacement_control': None,
        'remove_variant': False
    },
    
    # Classic/Button kh√¥ng h·ªó tr·ª£ m·ªôt s·ªë properties
    'Classic/Button': {
        'forbidden_properties': ['BorderRadius', 'Disabled', 'Align'],
        'replacement_control': None,
        'remove_variant': False,
        'property_replacements': {
            'Disabled': 'DisplayMode'  # Thay Disabled b·∫±ng DisplayMode
        }
    },
    
    # Classic/TextInput kh√¥ng h·ªó tr·ª£ m·ªôt s·ªë properties
    'Classic/TextInput': {
        'forbidden_properties': ['OnFocus', 'OnBlur', 'TextMode'],
        'replacement_control': None,
        'remove_variant': False,
        'property_replacements': {
            'TextMode': 'Mode'  # Thay TextMode b·∫±ng Mode
        }
    }
}

def fix_pa2108_errors(content):
    """
    S·ª≠a c√°c l·ªói PA2108 trong content YAML
    """
    lines = content.split('\n')
    result_lines = []
    i = 0
    changes_made = []
    
    while i < len(lines):
        line = lines[i]
        
        # T√¨m Control declarations
        if 'Control:' in line and not line.strip().startswith('#'):
            control_type = line.split('Control:')[1].strip()
            current_indent = len(line) - len(line.lstrip())
            
            # X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho Gallery VariableHeight
            if control_type == 'Gallery':
                # Ki·ªÉm tra variant trong block n√†y
                block_lines = [line]
                j = i + 1
                is_variable_height = False
                
                while j < len(lines):
                    next_line = lines[j]
                    if next_line.strip() == '':
                        block_lines.append(next_line)
                        j += 1
                        continue
                        
                    next_indent = len(next_line) - len(next_line.lstrip())
                    if next_indent <= current_indent and next_line.strip():
                        break
                    
                    block_lines.append(next_line)
                    
                    if 'Variant: VariableHeight' in next_line:
                        is_variable_height = True
                    
                    j += 1
                
                if is_variable_height:
                    control_type = 'Gallery_VariableHeight'
            
            # Ki·ªÉm tra c√≥ c·∫ßn fix kh√¥ng
            if control_type in PA2108_FIXES:
                fix_config = PA2108_FIXES[control_type]
                
                # ƒê·ªçc to√†n b·ªô block c·ªßa control n√†y
                if control_type != 'Gallery_VariableHeight':
                    block_lines = [line]
                    j = i + 1
                    
                    while j < len(lines):
                        next_line = lines[j]
                        if next_line.strip() == '':
                            block_lines.append(next_line)
                            j += 1
                            continue
                            
                        next_indent = len(next_line) - len(next_line.lstrip())
                        if next_indent <= current_indent and next_line.strip():
                            break
                        
                        block_lines.append(next_line)
                        j += 1
                
                # Fix c√°c properties trong block
                for k, block_line in enumerate(block_lines):
                    modified = False
                    
                    # Fix control type n·∫øu c·∫ßn
                    if 'Control:' in block_line and fix_config.get('replacement_control'):
                        old_control = control_type
                        new_control = fix_config['replacement_control']
                        block_lines[k] = block_line.replace(f'Control: {old_control}', f'Control: {new_control}')
                        changes_made.append(f"Thay ƒë·ªïi {old_control} ‚Üí {new_control}")
                        modified = True
                    
                    # X√≥a Variant n·∫øu c·∫ßn
                    if fix_config.get('remove_variant') and 'Variant:' in block_line:
                        # Ki·ªÉm tra forbidden variants n·∫øu c√≥
                        forbidden_variants = fix_config.get('forbidden_variants', [])
                        if forbidden_variants:
                            for variant in forbidden_variants:
                                if f'Variant: {variant}' in block_line:
                                    block_lines[k] = ''
                                    changes_made.append(f"X√≥a Variant: {variant} cho {control_type}")
                                    modified = True
                                    break
                        else:
                            block_lines[k] = ''
                            changes_made.append("X√≥a Variant property")
                            modified = True
                    
                    # X√≥a forbidden properties
                    for forbidden_prop in fix_config['forbidden_properties']:
                        if f'{forbidden_prop}:' in block_line and not block_line.strip().startswith('#'):
                            # Ki·ªÉm tra c√≥ replacement kh√¥ng
                            replacements = fix_config.get('property_replacements', {})
                            if forbidden_prop in replacements:
                                replacement_prop = replacements[forbidden_prop]
                                block_lines[k] = block_line.replace(f'{forbidden_prop}:', f'{replacement_prop}:')
                                changes_made.append(f"Thay ƒë·ªïi {forbidden_prop} ‚Üí {replacement_prop}")
                            else:
                                block_lines[k] = ''
                                changes_made.append(f"X√≥a property: {forbidden_prop}")
                            modified = True
                
                result_lines.extend(block_lines)
                i = j
            else:
                result_lines.append(line)
                i += 1
        else:
            result_lines.append(line)
            i += 1
    
    return '\n'.join(result_lines), changes_made

def process_file(file_path):
    """
    X·ª≠ l√Ω m·ªôt file YAML
    """
    print(f"Ki·ªÉm tra: {file_path}")
    
    try:
        # ƒê·ªçc file
        with open(file_path, 'r', encoding='utf-8') as f:
            original = f.read()
        
        # S·ª≠a l·ªói
        fixed, changes = fix_pa2108_errors(original)
        
        # Ki·ªÉm tra c√≥ thay ƒë·ªïi kh√¥ng
        if original != fixed and changes:
            # T·∫°o backup
            backup_path = file_path + '.backup'
            with open(backup_path, 'w', encoding='utf-8') as f:
                f.write(original)
            
            # Ghi file m·ªõi
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(fixed)
            
            print(f"  ‚úÖ ƒê√£ s·ª≠a file:")
            for change in changes:
                print(f"     ‚Üí {change}")
            print(f"  üìÅ Backup: {backup_path}")
        else:
            print(f"  ‚ö™ Kh√¥ng c√≥ l·ªói PA2108 c·∫ßn s·ª≠a")
    
    except Exception as e:
        print(f"  ‚ùå L·ªói: {e}")

def main():
    print("üîß S·ª≠a c√°c l·ªói PA2108: Unknown property")
    print("="*50)
    
    # T√¨m t·∫•t c·∫£ file YAML
    yaml_files = []
    for pattern in ['*.yaml', '*.yml']:
        yaml_files.extend(glob.glob(pattern, recursive=False))
        yaml_files.extend(glob.glob(f'**/{pattern}', recursive=True))
    
    yaml_files = sorted(set(yaml_files))
    
    print(f"üìÅ T√¨m th·∫•y {len(yaml_files)} file YAML")
    print("\nüöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...")
    
    for file_path in yaml_files:
        process_file(file_path)
    
    print("\n‚úÖ Ho√†n t·∫•t!")
    print("\nüìã C√°c l·ªói ƒë√£ fix:")
    print("- GroupContainer + OnSelect ‚Üí Rectangle")
    print("- Rectangle + Variant ‚Üí X√≥a Variant")
    print("- Gallery VariableHeight + WrapCount ‚Üí X√≥a WrapCount")
    print("- Classic/Button + BorderRadius/Disabled/Align ‚Üí X√≥a")
    print("- Rectangle + Individual corner radius ‚Üí BorderRadius")
    print("- Classic/TextInput + OnFocus/OnBlur/TextMode ‚Üí X√≥a/Thay")
    print("- Backup files ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông")

if __name__ == "__main__":
    main() 