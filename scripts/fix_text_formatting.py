#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script ƒë·ªÉ s·ª≠a l·ªói format text trong file YAML Power App
T√¨m v√† thay th·∫ø ": " th√†nh ":" trong c√°c chu·ªói string ƒë∆∞·ª£c ƒë√≥ng b·ªüi d·∫•u ngo·∫∑c k√©p
"""

import os
import re
import glob
import argparse
from pathlib import Path

def process_string_content(text):
    """
    X·ª≠ l√Ω n·ªôi dung b√™n trong chu·ªói string ƒë·ªÉ thay th·∫ø ": " th√†nh ":"
    """
    # Thay th·∫ø ": " th√†nh ":" nh∆∞ng ch·ªâ trong text content
    # Kh√¥ng thay th·∫ø n·∫øu ": " l√† ph·∫ßn c·ªßa URL ho·∫∑c path
    processed = text.replace(': ', ':')
    return processed

def fix_yaml_text_formatting(content):
    """
    S·ª≠a l·ªói formatting trong file YAML
    T√¨m c√°c chu·ªói string trong d·∫•u ngo·∫∑c k√©p v√† s·ª≠a ": " th√†nh ":"
    """
    result = ""
    i = 0
    
    while i < len(content):
        char = content[i]
        
        if char == '"':
            # B·∫Øt ƒë·∫ßu m·ªôt chu·ªói string
            result += char  # Th√™m d·∫•u " m·ªü
            i += 1
            
            # Duy·ªát cho ƒë·∫øn khi t√¨m th·∫•y d·∫•u " ƒë√≥ng
            string_content = ""
            while i < len(content):
                current_char = content[i]
                
                if current_char == '"':
                    # T√¨m th·∫•y d·∫•u " ƒë√≥ng
                    # X·ª≠ l√Ω n·ªôi dung string
                    processed_content = process_string_content(string_content)
                    result += processed_content
                    result += current_char  # Th√™m d·∫•u " ƒë√≥ng
                    i += 1
                    break
                elif current_char == '\\' and i + 1 < len(content):
                    # X·ª≠ l√Ω escape characters
                    string_content += current_char
                    i += 1
                    if i < len(content):
                        string_content += content[i]
                        i += 1
                else:
                    string_content += current_char
                    i += 1
            else:
                # N·∫øu kh√¥ng t√¨m th·∫•y d·∫•u " ƒë√≥ng, th√™m n·ªôi dung c√≤n l·∫°i
                result += string_content
                break
        else:
            result += char
            i += 1
    
    return result

def process_yaml_file(file_path):
    """
    X·ª≠ l√Ω m·ªôt file YAML
    """
    print(f"ƒêang x·ª≠ l√Ω: {file_path}")
    
    try:
        # ƒê·ªçc file v·ªõi encoding UTF-8
        with open(file_path, 'r', encoding='utf-8') as f:
            original_content = f.read()
        
        # X·ª≠ l√Ω n·ªôi dung
        fixed_content = fix_yaml_text_formatting(original_content)
        
        # Ki·ªÉm tra xem c√≥ thay ƒë·ªïi g√¨ kh√¥ng
        if original_content != fixed_content:
            # T·∫°o backup
            backup_path = file_path + '.backup'
            with open(backup_path, 'w', encoding='utf-8') as f:
                f.write(original_content)
            print(f"  ‚Üí ƒê√£ t·∫°o backup: {backup_path}")
            
            # Ghi file ƒë√£ s·ª≠a
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(fixed_content)
            print(f"  ‚Üí ƒê√£ s·ª≠a file: {file_path}")
            
            # Hi·ªÉn th·ªã th·ªëng k√™ thay ƒë·ªïi
            changes = original_content.count(': ') - fixed_content.count(': ')
            if changes > 0:
                print(f"  ‚Üí ƒê√£ thay th·∫ø {changes} l·ªói ': ' th√†nh ':'")
        else:
            print(f"  ‚Üí Kh√¥ng c√≥ thay ƒë·ªïi trong file")
            
    except Exception as e:
        print(f"  ‚ùå L·ªói khi x·ª≠ l√Ω file {file_path}: {e}")

def find_yaml_files(directory):
    """
    T√¨m t·∫•t c·∫£ file YAML trong th∆∞ m·ª•c v√† th∆∞ m·ª•c con
    """
    yaml_patterns = ['*.yaml', '*.yml']
    yaml_files = []
    
    for pattern in yaml_patterns:
        # T√¨m trong th∆∞ m·ª•c hi·ªán t·∫°i
        yaml_files.extend(glob.glob(os.path.join(directory, pattern)))
        # T√¨m trong th∆∞ m·ª•c con
        yaml_files.extend(glob.glob(os.path.join(directory, '**', pattern), recursive=True))
    
    return sorted(yaml_files)

def main():
    parser = argparse.ArgumentParser(
        description='S·ª≠a l·ªói format text trong file YAML Power App'
    )
    parser.add_argument(
        'directory',
        nargs='?',
        default='.',
        help='Th∆∞ m·ª•c ch·ª©a file YAML c·∫ßn x·ª≠ l√Ω (m·∫∑c ƒë·ªãnh: th∆∞ m·ª•c hi·ªán t·∫°i)'
    )
    parser.add_argument(
        '--file',
        help='X·ª≠ l√Ω m·ªôt file c·ª• th·ªÉ thay v√¨ to√†n b·ªô th∆∞ m·ª•c'
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='Ch·ªâ hi·ªÉn th·ªã nh·ªØng g√¨ s·∫Ω ƒë∆∞·ª£c thay ƒë·ªïi m√† kh√¥ng th·ª±c s·ª± thay ƒë·ªïi file'
    )
    
    args = parser.parse_args()
    
    print("üîß Script s·ª≠a l·ªói format text trong YAML")
    print("="*50)
    
    if args.file:
        # X·ª≠ l√Ω m·ªôt file c·ª• th·ªÉ
        if os.path.exists(args.file):
            if args.dry_run:
                print("üìã DRY RUN MODE - Kh√¥ng thay ƒë·ªïi file th·ª±c s·ª±")
                print(f"S·∫Ω x·ª≠ l√Ω file: {args.file}")
            else:
                process_yaml_file(args.file)
        else:
            print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {args.file}")
    else:
        # X·ª≠ l√Ω t·∫•t c·∫£ file YAML trong th∆∞ m·ª•c
        yaml_files = find_yaml_files(args.directory)
        
        if not yaml_files:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file YAML n√†o trong th∆∞ m·ª•c: {args.directory}")
            return
        
        print(f"üìÅ T√¨m th·∫•y {len(yaml_files)} file YAML")
        
        if args.dry_run:
            print("\nüìã DRY RUN MODE - Danh s√°ch file s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω:")
            for file_path in yaml_files:
                print(f"  ‚Ä¢ {file_path}")
        else:
            print("\nüöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...")
            for file_path in yaml_files:
                process_yaml_file(file_path)
    
    print("\n‚úÖ Ho√†n t·∫•t!")

if __name__ == "__main__":
    main() 